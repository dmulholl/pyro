import std::json::{to_json};
import std::json::{from_json};
import std::json::{format};

# ------------------ #
#  Marshall to JSON  #
# ------------------ #

assert to_json(null) == `null`;
assert to_json(true) == `true`;
assert to_json(false) == `false`;

assert to_json(123) == `123`;
assert to_json(1.25) == `1.25`;
assert to_json(1) == `1`;
assert to_json(-1) == `-1`;
assert to_json(1.0) == `1.0`;
assert to_json(-1.0) == `-1.0`;

assert to_json(``) == `""`;
assert to_json(`foo bar`) == `"foo bar"`;
assert to_json(`foo \n bar`) == `"foo \n bar"`;
assert to_json(`foo \t\r\n bar`) == `"foo \t\r\n bar"`;

var v0 = [];
assert to_json(v0) == `[]`;

var v1 = [1, 2.5, 3];
assert to_json(v1) == `[1, 2.5, 3]`;

var v2 = ["abc", "def", "ghi"];
assert to_json(v2) == `["abc", "def", "ghi"]`;

var v3 = [v1, v2];
assert to_json(v3) == `[[1, 2.5, 3], ["abc", "def", "ghi"]]`;

var m0 = {};
assert to_json(m0) == `{}`;

var m1 = {"foo" = 123, "bar" = 456};
assert to_json(m1) == `{"foo": 123, "bar": 456}`;

var m2 = {"foo" = v0, "bar" = v1, "baz" = v2};
assert to_json(m2) == `{"foo": [], "bar": [1, 2.5, 3], "baz": ["abc", "def", "ghi"]}`;

var m3 = {"foo" = m0, "bar" = m1, "baz" = m2};
assert to_json(m3) == `{"foo": {}, "bar": {"foo": 123, "bar": 456}, "baz": {"foo": [], "bar": [1, 2.5, 3], "baz": ["abc", "def", "ghi"]}}`;

class Foo {
    def $json() {
        return `"FOO"`;
    }
}
assert to_json(Foo()) == `"FOO"`;
var map_with_foo = {"key" = Foo()};
assert to_json(map_with_foo) == `{"key": "FOO"}`;

class Bar {
    var num: i64 = 123;
    var obj: Foo;

    def $init() {
        self.obj = Foo();
    }

    def $json() {
        return $fmt(`\{"num": {}, "obj": {}}`, to_json(self.num), to_json(self.obj));
    }
}
var bar = Bar();
assert to_json(bar) == `{"num": 123, "obj": "FOO"}`;

class Baz {
    pub var foo;
    pub var bar;
    pub var baz;
    var bam;

    def $init(foo, bar, baz, bam) {
        self.foo = foo;
        self.bar = bar;
        self.baz = baz;
        self.bam = bam;
    }
}
var obj1 = Baz(1, 2, 3, 4);
assert to_json(obj1) == `{"foo": 1, "bar": 2, "baz": 3}`;
var obj2 = Baz("A", "B", "C", "D");
assert to_json(obj2) == `{"foo": "A", "bar": "B", "baz": "C"}`;

assert $is_err(to_json($stdin()));

# --------------------------- #
#  Marshall to indented JSON  #
# --------------------------- #

var obj;

obj = [];
assert to_json(obj, 2) == `[]`;

obj = [1, 2, 3];
assert to_json(obj, 2) == `[
  1,
  2,
  3
]`;

obj = [1, [2, 3], 4];
assert to_json(obj, 2) == `[
  1,
  [
    2,
    3
  ],
  4
]`;

obj = {};
assert to_json(obj, 2) == `{}`;

obj = {"foo" = 123, "bar" = 456};
assert to_json(obj, 2) == `{
  "foo": 123,
  "bar": 456
}`;

obj = {"foo" = 123, "bar" = 456, "baz" = {"a" = 1, "b" = 2}};
assert to_json(obj, 2) == `{
  "foo": 123,
  "bar": 456,
  "baz": {
    "a": 1,
    "b": 2
  }
}`;

obj = [
    1,
    {"foo" = 2, "bar" = [3, 4], "baz" = {"a" = true, "b" = false, "c" = [], "d" = {}, "e" = {"f" = null}}},
    5
];
assert to_json(obj, 2) == `[
  1,
  {
    "foo": 2,
    "bar": [
      3,
      4
    ],
    "baz": {
      "a": true,
      "b": false,
      "c": [],
      "d": {},
      "e": {
        "f": null
      }
    }
  },
  5
]`;

class Bam {
    def $json() {
        return `{"foo": 123, "bar": 456}`;
    }
}

assert to_json(Bam(), 2) == `{
  "foo": 123,
  "bar": 456
}`;

obj = [11, {"a" = 1, "b" = Bam(), "c" = 2}, 22];
assert to_json(obj, 2) == `[
  11,
  {
    "a": 1,
    "b": {
      "foo": 123,
      "bar": 456
    },
    "c": 2
  },
  22
]`;

# ---------------------- #
#  Unmarshall from JSON  #
# ---------------------- #

assert from_json(`null`) == null;
assert from_json(`true`) == true;
assert from_json(`false`) == false ;

assert from_json(`-1`) == -1 ;
assert from_json(`0`) == 0 ;
assert from_json(`1`) == 1 ;
assert from_json(`123`) == 123 ;

assert from_json(`-1.0`) == -1.0 ;
assert from_json(`0.0`) == 0.0 ;
assert from_json(`1.0`) == 1.0 ;
assert from_json(`1.25`) == 1.25;
assert from_json(`1e3`) == 1000.0;
assert from_json(`1e6`) == 1000000.0;
assert from_json(`1e-3`) == 0.001;

assert from_json(`"foo bar"`) == `foo bar`;
assert from_json(`"foo \n bar"`) == "foo \n bar";
assert from_json(`"foo \r\n\t bar"`) == "foo \r\n\t bar";

assert $debug(from_json(`"foo bar"`)) == `"foo bar"`;
assert $debug(from_json(`"foo \n bar"`)) == `"foo \n bar"`;
assert $debug(from_json(`"foo \r\n\t bar"`)) == `"foo \r\n\t bar"`;

assert from_json(`"\u20AC"`) == "â‚¬";

var input1 = `[]`;
var output1 = from_json(input1);
assert $is_vec(output1);
assert output1:is_empty();

var input2 = `[123, 1.25, "foo"]`;
var output2 = from_json(input2);
assert $is_vec(output2);
assert output2[0] == 123;
assert output2[1] == 1.25;
assert output2[2] == "foo";

var input3 = `[123, 1.25, "foo", [1, 2, 3]]`;
var output3 = from_json(input3);
assert $is_vec(output3);
assert output3[0] == 123;
assert output3[1] == 1.25;
assert output3[2] == "foo";
assert $is_vec(output3[3]);
assert output3[3][0] == 1;
assert output3[3][1] == 2;
assert output3[3][2] == 3;

var input4 = `{}`;
var output4 = from_json(input4);
assert $is_map(output4);
assert output4:is_empty();

var input5 = `{"foo": 123, "bar": 456}`;
var output5 = from_json(input5);
assert $is_map(output5);
assert output5["foo"] ==  123;
assert output5["bar"] ==  456;

var input6 = `{"foo": [1, 2, 3], "bar": [4, 5, 6]}`;
var output6 = from_json(input6);
assert $is_map(output6);
assert $is_vec(output6["foo"]);
assert $is_vec(output6["bar"]);

var input7 = `[{"foo": 123, "bar": 456}, {"bam": 789, "baz": 987}]`;
var output7 = from_json(input7);
assert $is_vec(output7);
assert output7[0]["foo"] == 123;
assert output7[1]["baz"] == 987;

assert $is_err(from_json(``));
assert $is_err(from_json(`foo`));
assert $is_err(from_json(`&`));
assert $is_err(from_json("\x01"));
assert $is_err(from_json(`123.456.789`));
assert $is_err(from_json(`"`));
assert $is_err(from_json(`"foo`));
assert $is_err(from_json(`'foo'`));
assert $is_err(from_json(`123 456`));

# ------------------------------------ #
#  Unmarshall from JSON: strict=false  #
# ------------------------------------ #

var unmarshal_unstrict = `
{
  // this is a comment
  "number": 123,
  "string": "foobar",
  "list1": [123, 456, 789,],
  "list2" [
    "foo",
    // this is another comment
    "bar",
  ],
  "bool": true,
  "object": {
    // this is a third comment
    "field1": 123,
    "field2": 456,
  },
}
`;
assert $is_obj(from_json(unmarshal_unstrict, false));

# ------------------------------------ #
#  Unmarshall from JSON: strict=true  #
# ------------------------------------ #

var unmarshal_strict_pass = `
{
  "number": 123,
  "string": "foobar",
  "list1": [123, 456, 789],
  "list2" [
    "foo",
    "bar"
  ],
  "bool": true,
  "object": {
    "field1": 123,
    "field2": 456
  }
}
`;
assert $is_obj(from_json(unmarshal_strict_pass, true));

var unmarshal_strict_fail = `
{
  // this is a comment
  "number": 123,
  "string": "foobar",
  "list1": [123, 456, 789,],
  "list2" [
    "foo",
    // this is another comment
    "bar",
  ],
  "bool": true,
  "object": {
    // this is a third comment
    "field1": 123,
    "field2": 456,
  },
}
`;
assert $is_err(from_json(unmarshal_strict_fail, true));

var unmarshal_strict_has_comment_1 = `
// this is a comment
{
  "number": 123
}
`;
assert $is_err(from_json(unmarshal_strict_has_comment_1, true));

var unmarshal_strict_has_comment_2 = `
{
  // this is a comment
  "number": 123
}
`;
assert $is_err(from_json(unmarshal_strict_has_comment_2, true));

var unmarshal_strict_has_comment_3 = `
{
  "number": 123,
  "list": [
    123,
    // this is a comment
    456
  ]
}
`;
assert $is_err(from_json(unmarshal_strict_has_comment_3, true));

var unmarshal_strict_has_trailing_comma_1 = `
{
  "number": 123,
}
`;
assert $is_err(from_json(unmarshal_strict_has_trailing_comma_1, true));

var unmarshal_strict_has_trailing_comma_2 = `
{
  "number": 123,
  "list": [123, 456,]
}
`;
assert $is_err(from_json(unmarshal_strict_has_trailing_comma_2, true));

var unmarshal_strict_has_trailing_comma_3 = `
{
  "number": 123,
  "list": [123, 456],
}
`;
assert $is_err(from_json(unmarshal_strict_has_trailing_comma_3, true));

var unmarshal_strict_has_trailing_comma_4 = `
{
  "number": 123,
  "list": [123, 456],
  "object": {"foo": 123, "bar": 456,}
}
`;
assert $is_err(from_json(unmarshal_strict_has_trailing_comma_4, true));

var unmarshal_strict_has_trailing_comma_5 = `
{
  "number": 123,
  "list": [123, 456],
  "object": {"foo": 123, "bar": 456},
}
`;
assert $is_err(from_json(unmarshal_strict_has_trailing_comma_5, true));

var unmarshal_strict_has_trailing_comma_6 = `
{
  "number": 123,
  "list": [123, 456,],
  "object": {"foo": 123, "bar": 456,},
}
`;
assert $is_err(from_json(unmarshal_strict_has_trailing_comma_6, true));

# ---------------- #
#  Pretty Printer  #
# ---------------- #

var input = ``;
assert $is_err(format(input));

input = `[`;
assert $is_err(format(input));

input = `[1, 2, 3`;
assert $is_err(format(input));

input = `foo`;
assert $is_err(format(input));

input = `123`;
assert format(input) == `123`;

input = `[]`;
assert format(input) == `[]`;

input = `[1, 2, 3]`;
assert format(input) == `[
  1,
  2,
  3
]`;

input = `[1, [2, 3], 4]`;
assert format(input) == `[
  1,
  [
    2,
    3
  ],
  4
]`;

input = `{}`;
assert format(input) == `{}`;

input = `{"foo": 123, "bar": 456}`;
assert format(input) == `{
  "foo": 123,
  "bar": 456
}`;

input = `{"foo": 123, "bar": 456, "baz": {"a": 1, "b": 2}}`;
assert format(input) == `{
  "foo": 123,
  "bar": 456,
  "baz": {
    "a": 1,
    "b": 2
  }
}`;

input = `[1, {"foo": 2, "bar": [3, 4], "baz": {"a": true, "b": false, "c": [], "d": {}, "e": {"f": null}}}, 5]`;
assert format(input) == `[
  1,
  {
    "foo": 2,
    "bar": [
      3,
      4
    ],
    "baz": {
      "a": true,
      "b": false,
      "c": [],
      "d": {},
      "e": {
        "f": null
      }
    }
  },
  5
]`;
