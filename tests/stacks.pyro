assert !$is_stack("foobar");

var foo = $stack();
assert $is_stack(foo);
assert foo:count() == 0;
assert foo:is_empty();
assert !foo:contains("xyz");
assert !("xyz" in foo);
assert $is_err(foo:pop());
assert $is_err(foo:peek());

foo:push("abc");
assert foo:count() == 1;
assert foo:contains("abc");
assert "abc" in foo;
assert !foo:contains("xyz");
assert !("xyz" in foo);
assert foo:peek() == "abc";

foo:push("def");
assert foo:count() == 2;
assert foo:contains("def");
assert "def" in foo;
assert !foo:contains("xyz");
assert !("xyz" in foo);
assert foo:peek() == "def";

assert !foo:is_empty();
assert foo:pop() == "def";
assert foo:count() == 1;
assert foo:pop() == "abc";
assert foo:count() == 0;
assert foo:is_empty();
assert !foo:contains("xyz");
assert !("xyz" in foo);

def $test_clear() {
    var stack = $stack();
    assert stack:count() == 0;

    stack:push(123);
    stack:push(456);
    assert stack:count() == 2;

    stack:clear();
    assert stack:count() == 0;

    stack:push("A");
    stack:push("B");
    assert stack:pop() == "B";
    assert stack:pop() == "A";
}

def $test_iteration_order_with_for_loop() {
    var stack = $stack();

    stack:push('a');
    stack:push('b');
    stack:push('c');

    var vec = [];

    for value in stack {
        vec:append(value);
    }

    assert vec[0] == 'c';
    assert vec[1] == 'b';
    assert vec[2] == 'a';
}

def $test_iteration_order_with_iter_function() {
    var stack = $stack();

    stack:push('a');
    stack:push('b');
    stack:push('c');

    var vec = $iter(stack):to_vec();

    assert vec[0] == 'c';
    assert vec[1] == 'b';
    assert vec[2] == 'a';
}

def $test_iteration_order_with_values_method() {
    var stack = $stack();

    stack:push('a');
    stack:push('b');
    stack:push('c');

    var vec = stack:values():to_vec();

    assert vec[0] == 'c';
    assert vec[1] == 'b';
    assert vec[2] == 'a';
}
