import $std::prng;


def $test_sequential_integers() {
    var vec = $range(100):to_vec();
    vec:quicksort();
    assert vec:is_sorted();
}


def $test_reversed_sequential_integers() {
    var vec = $range(100):to_vec():reverse();
    vec:quicksort();
    assert vec:is_sorted();
}


def $test_shuffled_sequential_integers() {
    var vec = $range(100):to_vec():shuffle();
    vec:quicksort();
    assert vec:is_sorted();
}


def $test_random_integers_with_duplicates() {
    var vec = $vec();

    for i in $range(100) {
        vec:append(prng::rand_int(10));
    }

    vec:quicksort();
    assert vec:is_sorted();
}


def $test_strings() {
    var vec = ["a", "aa", "aaa", "aaa", "ab", "abc", "abcd", "def", "zef", "zzz"];

    vec:shuffle();
    vec:quicksort();
    assert vec:is_sorted();

    assert vec[0] == "a";
    assert vec[1] == "aa";
    assert vec[2] == "aaa";
    assert vec[3] == "aaa";
    assert vec[4] == "ab";
    assert vec[5] == "abc";
    assert vec[6] == "abcd";
    assert vec[7] == "def";
    assert vec[8] == "zef";
    assert vec[9] == "zzz";
}


def $test_custom_comparison_func_1() {
    def standard_sort(a, b) {
        return a < b;
    }

    var vec = $range(100):to_vec():shuffle();
    vec:quicksort(standard_sort);
    assert vec:is_sorted();
}


def $test_custom_comparison_func_2() {
    def reverse_sort(a, b) {
        return a > b;
    }

    var vec = $range(100):to_vec():shuffle();
    vec:quicksort(reverse_sort):reverse();
    assert vec:is_sorted();
}


def $test_mixed_number_types() {
    var vec = [99, 123.456, 1.0, 'A', 2.5];
    assert !vec:is_sorted();
    vec:quicksort();
    assert vec:is_sorted();
    assert vec[0] == 1.0;
    assert vec[1] == 2.5;
    assert vec[2] == 'A';
    assert vec[3] == 99;
    assert vec[4] == 123.456;
}


def $test_class_with_custom_lt_operator() {
    class Object {
        pub var value;

        def $init(value) {
            self.value = value;
        }

        def $op_binary_less(other) {
            return self.value < other.value;
        }
    }

    var vec = [
        Object(456),
        Object(123),
        Object(789),
        Object(000),
    ];

    assert !vec:is_sorted();
    vec:quicksort();
    assert vec:is_sorted();
    assert vec[0].value == 0;
    assert vec[1].value == 123;
    assert vec[2].value == 456;
    assert vec[3].value == 789;

    vec:append("xyz");
    assert $is_err(try vec:quicksort());
}


def $test_non_comparable_types() {
    var vec = [123, "foo"];
    assert $is_err(try vec:quicksort());
}
