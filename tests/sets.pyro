assert !$is_set("foobar");

var foo = $set();
assert $is_set(foo);
assert foo:count() == 0;
assert foo:is_empty();

foo:add("abc");
foo:add("def");
foo:add(123);
foo:add(456);

foo:add("abc");
foo:add(123);

assert foo:count() == 4;
assert !foo:is_empty();
assert foo:contains("abc");
assert foo:contains(123);
assert !foo:contains("foo");
assert !foo:contains(999);

foo:remove("abc");
foo:remove(123);

assert foo:count() == 2;
assert !foo:contains("abc");
assert !foo:contains(123);


def $test_make_set_from_iterable() {
    var foo = $set([1, 2, 3, 1, 2, 3]);
    assert $is_set(foo);
    assert foo:count() == 3;
    assert foo:contains(1);

    var bar = $set("abc":chars());
    assert $is_set(bar);
    assert bar:count() == 3;
    assert bar:contains('a');
}


def $test_contains() {
    var set = $set(["abc", "def", "ghi"]);

    assert set:contains("abc");
    assert set:contains("def");
    assert set:contains("ghi");
    assert !set:contains("jkl");
    assert !set:contains(123);
}


def $test_in() {
    var set = $set(["abc", "def", "ghi"]);

    assert "abc" in set;
    assert "def" in set;
    assert "ghi" in set;

    assert "jkl" in set == false;
    assert false == "jkl" in set;
    assert !("jkl" in set);

    assert 123 in set == false;
}


def $test_union() {
    var s1 = $set("ABC");
    var s2 = $set("BCD");

    var u1 = s1:union(s2);
    assert $is_set(u1);
    assert u1:count() == 4;
    assert "A" in u1;
    assert "B" in u1;
    assert "C" in u1;
    assert "D" in u1;

    var u2 = s1 | s2;
    assert $is_set(u2);
    assert u2:count() == 4;
    assert "A" in u2;
    assert "B" in u2;
    assert "C" in u2;
    assert "D" in u2;

    var u3 = $set() | $set();
    assert u3:is_empty();
}


def $test_intersection() {
    var s1 = $set("ABC");
    var s2 = $set("BCD");

    var i1 = s1:intersection(s2);
    assert $is_set(i1);
    assert i1:count() == 2;
    assert "B" in i1;
    assert "C" in i1;

    var i2 = s1 & s2;
    assert $is_set(i2);
    assert i1:count() == 2;
    assert "B" in i1;
    assert "C" in i1;

    var i3 = $set() & $set();
    assert i3:is_empty();
}


def $test_difference() {
    var s1 = $set("ABC");
    var s2 = $set("BCD");

    var d1 = s1:difference(s2);
    assert $is_set(d1);
    assert d1:count() == 1;
    assert "A" in d1;

    var d2 = s2:difference(s1);
    assert $is_set(d2);
    assert d2:count() == 1;
    assert "D" in d2;

    var d3 = s1 - s2;
    assert $is_set(d3);
    assert d3:count() == 1;
    assert "A" in d3;

    var d4 = s2 - s1;
    assert $is_set(d4);
    assert d4:count() == 1;
    assert "D" in d4;
}


def $test_symmetric_difference() {
    var s1 = $set("ABC");
    var s2 = $set("BCD");

    var sd1 = s1:symmetric_difference(s2);
    assert $is_set(sd1);
    assert sd1:count() == 2;
    assert "A" in sd1;
    assert "D" in sd1;

    var sd2 = s2:symmetric_difference(s1);
    assert $is_set(sd2);
    assert sd2:count() == 2;
    assert "A" in sd2;
    assert "D" in sd2;

    var sd3 = s1 ^ s2;
    assert $is_set(sd3);
    assert sd3:count() == 2;
    assert "A" in sd3;
    assert "D" in sd3;

    var sd4 = s2 ^ s1;
    assert $is_set(sd4);
    assert sd4:count() == 2;
    assert "A" in sd4;
    assert "D" in sd4;
}


def $test_is_subset_of() {
    var s1 = $set("ABC");
    var s2 = $set("ABCD");
    var s3 = $set("BCD");

    assert s1:is_subset_of(s1);
    assert s1:is_subset_of(s2);
    assert s3:is_subset_of(s2);

    assert !s1:is_subset_of(s3);
    assert !s3:is_subset_of(s1);
    assert !s2:is_subset_of(s1);
    assert !s2:is_subset_of(s3);

    assert s1 <= s1;
    assert s1 <= s2;
    assert s3 <= s2;

    assert !(s1 <= s3);
    assert !(s3 <= s1);
    assert !(s2 <= s1);
    assert !(s2 <= s3);
}


def $test_is_proper_subset_of() {
    var s1 = $set("ABC");
    var s2 = $set("ABCD");
    var s3 = $set("BCD");

    assert s1:is_proper_subset_of(s2);
    assert s3:is_proper_subset_of(s2);

    assert !s1:is_proper_subset_of(s1);
    assert !s1:is_proper_subset_of(s3);
    assert !s3:is_proper_subset_of(s1);
    assert !s2:is_proper_subset_of(s1);
    assert !s2:is_proper_subset_of(s3);

    assert s1 < s2;
    assert s3 < s2;

    assert !(s1 < s1);
    assert !(s1 < s3);
    assert !(s3 < s1);
    assert !(s2 < s1);
    assert !(s2 < s3);
}


def $test_is_superset_of() {
    var s1 = $set("ABC");
    var s2 = $set("ABCD");
    var s3 = $set("BCD");

    assert s1:is_superset_of(s1);
    assert s2:is_superset_of(s1);
    assert s2:is_superset_of(s3);

    assert !s1:is_superset_of(s3);
    assert !s3:is_superset_of(s1);
    assert !s1:is_superset_of(s2);
    assert !s3:is_superset_of(s2);

    assert s1 >= s1;
    assert s2 >= s1;
    assert s2 >= s3;

    assert !(s1 >= s3);
    assert !(s3 >= s1);
    assert !(s1 >= s2);
    assert !(s3 >= s2);
}


def $test_is_proper_superset_of() {
    var s1 = $set("ABC");
    var s2 = $set("ABCD");
    var s3 = $set("BCD");

    assert s2:is_proper_superset_of(s1);
    assert s2:is_proper_superset_of(s3);

    assert !s1:is_proper_superset_of(s1);
    assert !s1:is_proper_superset_of(s3);
    assert !s3:is_proper_superset_of(s1);
    assert !s1:is_proper_superset_of(s2);
    assert !s3:is_proper_superset_of(s2);

    assert s2 >= s1;
    assert s2 >= s3;

    assert !(s1 > s1);
    assert !(s1 > s3);
    assert !(s3 > s1);
    assert !(s1 > s2);
    assert !(s3 > s2);
}


def $test_clear() {
    var set = $set("ABC");
    assert set:count() == 3;

    set:clear();
    assert set:count() == 0;
}


def $test_set_literals() {
    assert $is_map({});

    var s1 = {1};
    assert $is_set(s1);
    assert s1:count() == 1;

    var s2 = {1, 2};
    assert $is_set(s2);
    assert s2:count() == 2;

    var s3 = {1, 2, 3};
    assert $is_set(s3);
    assert s3:count() == 3;

    var s4 = {1, true, null, $err(), "foobar"};
    assert $is_set(s4);
    assert s4:count() == 5;

    assert $is_err(try $exec(`{1, 2 = "foo"}`));
    assert $is_err(try $exec(`{1 = "foo", 2}`));
}
