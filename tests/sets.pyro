assert !$is_set("foobar");

var foo = $set();
assert $is_set(foo);
assert foo:count() == 0;
assert foo:is_empty();

foo:add("abc");
foo:add("def");
foo:add(123);
foo:add(456);

foo:add("abc");
foo:add(123);

assert foo:count() == 4;
assert !foo:is_empty();
assert foo:contains("abc");
assert foo:contains(123);
assert !foo:contains("foo");
assert !foo:contains(999);

foo:remove("abc");
foo:remove(123);

assert foo:count() == 2;
assert !foo:contains("abc");
assert !foo:contains(123);


def $test_make_set_from_iterable() {
    var foo = $set([1, 2, 3, 1, 2, 3]);
    assert $is_set(foo);
    assert foo:count() == 3;
    assert foo:contains(1);

    var bar = $set("abc":chars());
    assert $is_set(bar);
    assert bar:count() == 3;
    assert bar:contains('a');
}


def $test_contains() {
    var set = $set(["abc", "def", "ghi"]);

    assert set:contains("abc");
    assert set:contains("def");
    assert set:contains("ghi");
    assert !set:contains("jkl");
    assert !set:contains(123);
}


def $test_in() {
    var set = $set(["abc", "def", "ghi"]);

    assert "abc" in set;
    assert "def" in set;
    assert "ghi" in set;

    assert "jkl" in set == false;
    assert false == "jkl" in set;
    assert !("jkl" in set);

    assert 123 in set == false;
}


def $test_union() {
    var s1 = $set("ABC");
    var s2 = $set("BCD");

    var u1 = s1:union(s2);
    assert $is_set(u1);
    assert u1:count() == 4;
    assert "A" in u1;
    assert "B" in u1;
    assert "C" in u1;
    assert "D" in u1;

    var u2 = s1 | s2;
    assert $is_set(u2);
    assert u2:count() == 4;
    assert "A" in u2;
    assert "B" in u2;
    assert "C" in u2;
    assert "D" in u2;
}


def $test_intersection() {
    var s1 = $set("ABC");
    var s2 = $set("BCD");

    var i1 = s1:intersection(s2);
    assert $is_set(i1);
    assert i1:count() == 2;
    assert "B" in i1;
    assert "C" in i1;

    var i2 = s1 & s2;
    assert $is_set(i2);
    assert i1:count() == 2;
    assert "B" in i1;
    assert "C" in i1;
}
