var global_variable = 0;


def fib(n) {
    if n < 2 {
        return n;
    }
    return fib(n - 1) + fib(n - 2);
}


class Foo {
    var value;

    def $init(value) {
        self.value = value * 257 + 123;
    }

    def change_value(arg) {
        self.value = self.value * arg;
    }

    def get_value() {
        return self.value;
    }
}


def do_arithmetic(a, b, c, d) {
    var foo = (((a * 137 + b * 17 + c * 23) / 31) * a) / (b + 1) + 2 * d;
    var bar = ((foo * a) / (b + 1)) * c + 3 * d;
    var baz = foo + bar + a + b + c + d;
    var bam = foo * 2 + bar * 3 + baz * 4;
    return bam;
}


def make_adder(n) {
    def adds_n(arg) {
        return arg + n;
    }
    return adds_n;
}


def fizzbuzz(n) {
    if n % 15 == 0 {
        return "fizzbuzz";
    } else if n % 3 == 0 {
        return "fizz";
    } else if n % 5 == 0 {
        return "buzz";
    } else {
        return n;
    }
}


def benchmark() {
    var vec = $vec();
    var map = $map();

    # Recursive function calls.
    var fib_result = fib(25);
    vec:append(fib_result);
    map["fib"] = fib_result;

    # Arithmetic.
    for i in $range(1000) {
        var result = (i * 109153 + 257) / 253 - 751 + 4059.123;
        vec:append(result);
        map[i] = result;
    }

    # Arithmetic in function.
    for i in $range(10) {
        for j in $range(10) {
            for k in $range(10) {
                var result = do_arithmetic(i, j, k, i + j + k);
                vec:append(result);
                map[$fmt("{}-{}-{}", i, j, k)] = result;
            }
        }
    }

    # Classes.
    for i in $range(1000) {
        var foo = Foo(123);
        foo:change_value(459);
        vec:append(foo:get_value());
        map[$str(i)] = foo:get_value();
    }

    # Strings.
    var string = "";
    for i in $range(1000) {
        string += $str(i);
        vec:append(string);
        map[i] = string;
    }

    # Closures.
    for i in $range(1000) {
        var func = make_adder(i);
        vec:append(func);
        vec:append(func(i));
        map[i] = func(i);
    }

    # FizzBuzz.
    for i in $range(1000) {
        vec:append(fizzbuzz(i));
        map[i] = fizzbuzz(i);
    }

    # Vector getting and setting.
    for i in $range(1000) {
        vec[i] = vec[i];
    }

    # Map getting and setting.
    for i in $range(1000) {
        map[i] = map[i];
    }

    # Update global.
    for i in $range(1000) {
        global_variable += 1;
    }

    # Update local.
    var local_variable = 0;
    for i in $range(1000) {
        local_variable += 1;
    }
}


def $time_benchmark() {
    benchmark();
}


def $test_benchmark() {
    benchmark();
}
