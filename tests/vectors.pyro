var foo = $vec();
assert $is_vec(foo);
assert foo:count() == 0;

foo:append("foo");
foo:append("bar");
assert foo:count() == 2;
assert foo:get(0) == "foo";
assert foo:get(1) == "bar";

foo:set(1, "foobar");
assert foo:count() == 2;
assert foo:get(1) == "foobar";


def $test_literal() {
    var vec = ["foo", 123, true];
    assert $is_vec(vec);
    assert vec:count() == 3;
    assert vec:get(0) == "foo";
    assert vec:get(1) == 123;
    assert vec:get(2) == true;
}


def $test_indexing() {
    var vec = $vec();
    vec:append("foo");
    vec:append(123);
    vec:append(true);

    assert vec[0] == "foo";
    assert vec[1] == 123;
    assert vec[2] == true;

    vec[0] = "bar";
    assert vec[0] == "bar";
}


def $test_stringification() {
    assert $str($vec()) == "[]";
    var vec = ["foo", 123, 'a', true];
    assert $str(vec) == `["foo", 123, 'a', true]`;
}


def $test_init_with_size() {
    var vec = $vec(10, null);
    assert $is_vec(vec);
    assert vec:count() == 10;
    assert vec:get(5) == null;
}


def $test_init_with_iter() {
    var range = $range(10);
    var vec = $vec(range);
    assert vec:count() == 10;
    assert vec[0] == 0;
    assert vec[1] == 1;
    assert vec[2] == 2;
}


def $test_init_with_vec() {
    var vec1 = [true, false, null];
    var vec2 = $vec(vec1);
    assert vec2:count() == 3;
    assert vec2[0] == true;
    assert vec2[1] == false;
    assert vec2[2] == null;
}


def $test_stress_allocation() {
    var vec = $vec();

    for i in $range(1000) {
        vec:append(i);
    }

    assert vec[123] == 123;
    assert vec[456] == 456;
    assert vec[789] == 789;
}


def $test_reverse() {
    var vec = [123, 456, 789];
    vec = vec:reverse();
    assert vec[0] == 789;
    assert vec[1] == 456;
    assert vec[2] == 123;
}


def $test_copy() {
    var vec = [123, 456, 789];
    var copy = vec:copy();
    assert copy:count() == 3;
    assert copy[0] == 123;
    assert copy[1] == 456;
    assert copy[2] == 789;
}


def $test_contains() {
    var vec = [123, 456, 789];
    assert vec:contains(123);
    assert vec:contains(789);
    assert !vec:contains(0);
    assert !vec:contains("foo");
}


def $test_index_of() {
    var vec = [123, 456, 789];
    assert vec:index_of(123) == 0;
    assert vec:index_of(456) == 1;
    assert vec:index_of(789) == 2;
    assert $is_err(vec:index_of("foo"));
}


def $test_map() {
    var vec = [1, 2, 3];

    var v1 = vec:map(def(n) { return n * 2; });
    assert v1:count() == 3;
    assert v1[0] == 2;
    assert v1[1] == 4;
    assert v1[2] == 6;

    var v2 = vec:map($str);
    assert v2:count() == 3;
    assert v2[0] == "1";
    assert v2[1] == "2";
    assert v2[2] == "3";
}


def $test_filter() {
    var vec = [1, 2, 3, 4, 5, 6];

    var v1 = vec:filter(def(n) { return n % 2 == 0; });
    assert v1:count() == 3;
    assert v1[0] == 2;
    assert v1[1] == 4;
    assert v1[2] == 6;

    var v2 = vec:filter(def(n) { return n > 4; });
    assert v2:count() == 2;
    assert v2[0] == 5;
    assert v2[1] == 6;
}


def $test_remove_last() {
    var vec = [1, 2, 3, 4];
    assert vec:remove_last() == 4;
    assert vec:remove_last() == 3;
    assert vec:remove_last() == 2;
    assert vec:remove_last() == 1;
    assert vec:count() == 0;
}


def $test_remove_first() {
    var vec = [1, 2, 3, 4];
    assert vec:remove_first() == 1;
    assert vec:remove_first() == 2;
    assert vec:remove_first() == 3;
    assert vec:remove_first() == 4;
    assert vec:count() == 0;
}


def $test_remove_at_index() {
    var vec = [1, 2, 3, 4];
    assert vec:remove_at(0) == 1;
    assert vec:remove_at(2) == 4;
    assert vec:remove_at(1) == 3;
    assert vec:remove_at(0) == 2;
    assert vec:count() == 0;
}


def $test_insert_at_index() {
    var vec = [1, 2, 3, 4];

    # Insert at the start.
    vec:insert_at(0, "foo");
    assert vec:count() == 5;
    assert vec[0] == "foo";
    assert vec[1] == 1;
    assert vec[2] == 2;
    assert vec[3] == 3;
    assert vec[4] == 4;

    # Insert at the end.
    vec:insert_at(5, "bar");
    assert vec:count() == 6;
    assert vec[0] == "foo";
    assert vec[1] == 1;
    assert vec[2] == 2;
    assert vec[3] == 3;
    assert vec[4] == 4;
    assert vec[5] == "bar";

    # Insert in the middle.
    vec:insert_at(3, "baz");
    assert vec:count() == 7;
    assert vec[0] == "foo";
    assert vec[1] == 1;
    assert vec[2] == 2;
    assert vec[3] == "baz";
    assert vec[4] == 3;
    assert vec[5] == 4;
    assert vec[6] == "bar";
}


def $test_first() {
    var vec = [1, 2, 3, 4];
    assert vec:first() == 1;
}


def $test_last() {
    var vec = [1, 2, 3, 4];
    assert vec:last() == 4;
}


def $test_is_empty() {
    var vec1 = [1, 2, 3, 4];
    assert !vec1:is_empty();

    var vec2 = [];
    assert vec2:is_empty();
}
