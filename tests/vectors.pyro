var foo = $vec();
assert $is_vec(foo);
assert foo:count() == 0;

foo:append("foo");
foo:append("bar");
assert foo:count() == 2;
assert foo:get(0) == "foo";
assert foo:get(1) == "bar";

foo:set(1, "foobar");
assert foo:count() == 2;
assert foo:get(1) == "foobar";


def $test_literal() {
    var vec = ["foo", 123, true];
    assert $is_vec(vec);
    assert vec:count() == 3;
    assert vec:get(0) == "foo";
    assert vec:get(1) == 123;
    assert vec:get(2) == true;
}


def $test_indexing() {
    var vec = $vec();
    vec:append("foo");
    vec:append(123);
    vec:append(true);

    assert vec[0] == "foo";
    assert vec[1] == 123;
    assert vec[2] == true;

    vec[0] = "bar";
    assert vec[0] == "bar";
}


def $test_stringification() {
    assert $str($vec()) == "[]";
    var vec = ["foo", 123, 'a', true];
    assert $str(vec) == `["foo", 123, 'a', true]`;
}


def $test_init_with_size() {
    var vec = $vec(10, null);
    assert $is_vec(vec);
    assert vec:count() == 10;
    assert vec:get(5) == null;
}


def $test_init_with_iter() {
    var range = $range(10);
    var vec = $vec(range);
    assert vec:count() == 10;
    assert vec[0] == 0;
    assert vec[1] == 1;
    assert vec[2] == 2;
}


def $test_init_with_vec() {
    var vec1 = [true, false, null];
    var vec2 = $vec(vec1);
    assert vec2:count() == 3;
    assert vec2[0] == true;
    assert vec2[1] == false;
    assert vec2[2] == null;
}


def $test_stress() {
    var vec = $vec();

    for i in $range(1000) {
        vec:append(i);
    }

    assert vec[123] == 123;
    assert vec[456] == 456;
    assert vec[789] == 789;
}
