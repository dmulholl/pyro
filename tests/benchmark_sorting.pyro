def $time_quicksort_shuffled_sequential_integers() {
    var vec = $range(100_000):to_vec():shuffle();
    vec:quicksort();
    assert vec:is_sorted();
}


def $time_quicksort_random_integers_with_duplicates() {
    var vec = $vec();
    for i in $range(100_000) {
        vec:append($std::prng::rand_int(50));
    }
    vec:quicksort();
    assert vec:is_sorted();
}


def $time_mergesort_shuffled_sequential_integers() {
    var vec = $range(100_000):to_vec():shuffle();
    vec:mergesort();
    assert vec:is_sorted();
}


def $time_mergesort_random_integers_with_duplicates() {
    var vec = $vec();
    for i in $range(100_000) {
        vec:append($std::prng::rand_int(50));
    }
    vec:mergesort();
    assert vec:is_sorted();
}
