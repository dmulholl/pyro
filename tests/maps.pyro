assert $is_map("foobar") == false;

var foo = $map();
assert $is_map(foo) == true;
assert foo:count() == 0;

foo:set("alpha", 123);
assert foo:count() == 1;

foo:set("beta", 456);
assert foo:count() == 2;

foo:set("gamma", 789);
assert foo:count() == 3;

assert foo:get("alpha") == 123;
assert foo:get("beta") == 456;
assert foo:get("gamma") == 789;

foo:set(1, null);
foo:set(2, true);
foo:set(3, false);

assert foo:count() == 6;
assert foo:get(1) == null;
assert foo:get(2) == true;
assert foo:get(3) == false;

foo:set(4, "foo");
foo:set(4.0, "bar");

assert foo:get(4) == "bar";
assert foo:get(4.0) == "bar";

assert $is_err(foo:get("undefined"));

var bound_method = foo:get;
assert bound_method("alpha") == 123;
assert bound_method(4) == "bar";

assert foo:count() == 7;
foo:remove("alpha");
assert foo:count() == 6;
assert $is_err(foo:get("alpha"));

assert foo:contains("beta") == true;
assert foo:contains("undefined") == false;


def $test_literal() {
    var map = {
        "abc" = 123,
        "def" = 456,
    };

    assert $is_map(map);
    assert map:count() == 2;
    assert map:get("abc") == 123;
    assert map:get("def") == 456;
}


def $test_indexing() {
    var map = $map();
    map["abc"] = 123;
    map["def"] = 456;

    assert map["abc"] == 123;
    assert map["def"] == 456;

    map["abc"] = 789;
    assert map["abc"] == 789;
}


def $test_stress_allocation() {
    var map = $map();

    for i in $range(1000) {
        map[i] = i;
    }

    assert map[123] == 123;
    assert map[456] == 456;
    assert map[789] == 789;
}


def $test_copy() {
    var map = {
        "abc" = 123,
        "def" = 456,
    };

    var copy = map:copy();

    assert copy:count() == 2;
    assert copy["abc"] == 123;
    assert copy["def"] == 456;
}


def $test_iterating_over_keys() {
    var map = {
        "abc" = 123,
        "def" = 456,
        "ghi" = 789,
    };

    var keys = map:keys():to_vec();
    assert keys:count() == 3;
    assert keys[0] == "abc";
    assert keys[1] == "def";
    assert keys[2] == "ghi";
}


def $test_iterating_over_values() {
    var map = {
        "abc" = 123,
        "def" = 456,
        "ghi" = 789,
    };

    var values = map:values():to_vec();
    assert values:count() == 3;
    assert values[0] == 123;
    assert values[1] == 456;
    assert values[2] == 789;
}


def $test_iterating_over_entries() {
    var map = {
        "abc" = 123,
        "def" = 456,
        "ghi" = 789,
    };

    var entries = map:iter():to_vec();
    assert entries:count() == 3;
    assert entries[0] == $tup("abc", 123);
    assert entries[1] == $tup("def", 456);
    assert entries[2] == $tup("ghi", 789);

    for entry in map {
        assert $is_tup(entry);
        var (key, value) = entry;
        assert key == "abc" || key == "def" || key == "ghi";
        assert value == 123 || value == 456 || value == 789;
        assert map[key] == value;
    }
}


def $test_is_empty() {
    var map1 = {
        "abc" = 123,
        "def" = 456,
    };
    assert !map1:is_empty();

    var map2 = {};
    assert map2:is_empty();
}


def $test_insertion_order_is_preserved() {
    var map = $map();

    map["q"] = null;
    map["w"] = null;
    map["e"] = null;
    map["r"] = null;
    map["t"] = null;
    map["y"] = null;
    map["u"] = null;
    map["i"] = null;
    map["o"] = null;
    map["p"] = null;

    var keys = map:keys():to_vec();

    assert keys[0] == "q";
    assert keys[1] == "w";
    assert keys[2] == "e";
    assert keys[3] == "r";
    assert keys[4] == "t";
    assert keys[5] == "y";
    assert keys[6] == "u";
    assert keys[7] == "i";
    assert keys[8] == "o";
    assert keys[9] == "p";

    map:remove("w");
    map:remove("r");
    map:remove("y");
    map:remove("i");
    map:remove("p");

    var remaining_keys = map:keys():to_vec();

    assert remaining_keys[0] == "q";
    assert remaining_keys[1] == "e";
    assert remaining_keys[2] == "t";
    assert remaining_keys[3] == "u";
    assert remaining_keys[4] == "o";
}


def $test_stress_allocation_and_deletion() {
    var map = $map();

    # Add 100 keys 0...99.
    for i in $range(100) {
        map[i] = null;
    }
    assert map:count() == 100;

    # Delete 50 even keys.
    for i in $range(100) {
        if i % 2 == 0 {
            map:remove(i);
        }
    }
    assert map:count() == 50;

    # Add 1000 keys 1000...1999.
    for i in $range(1000, 2000) {
        map[i] = null;
    }
    assert map:count() == 1050;

    # Delete 500 even keys.
    for i in $range(1000, 2000) {
        if i % 2 == 0 {
            map:remove(i);
        }
    }
    assert map:count() == 550;

    # Check order.
    var vec = map:keys():to_vec();
    assert vec:count() == 550;
    assert vec[0] == 1;
    assert vec[1] == 3;
    assert vec[548] == 1997;
    assert vec[549] == 1999;
}


def $test_contains() {
    var map = {
        "abc" = 123,
        "def" = 456,
        "ghi" = 789,
    };

    assert map:contains("abc");
    assert map:contains("def");
    assert map:contains("ghi");
    assert !map:contains("jkl");
    assert !map:contains(123);
}


def $test_in() {
    var map = {
        "abc" = 123,
        "def" = 456,
        "ghi" = 789,
    };

    assert "abc" in map;
    assert "def" in map;
    assert "ghi" in map;

    assert "jkl" in map == false;
    assert false == "jkl" in map;
    assert !("jkl" in map);

    assert 123 in map == false;
}
