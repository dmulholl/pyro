# Not a module.
var foobar;
assert !$is_module(foobar);

# Importing standard library modules.
import std;
assert $is_module(std);

import std::math;
assert $is_module(math);
assert $is_f64(math::PI);
assert math::abs(-1) == 1;

import std::math as alias;
assert $is_module(alias);
assert $is_f64(alias::PI);
assert alias::abs(-1) == 1;

# Importing .pyro modules. Each module has a mod_name variable and a get_mod_name() function so we
# can check scoping is working properly.
var mod_name = "imports";

def get_mod_name() {
    return mod_name;
}

assert get_mod_name() == "imports";

# ./lib1.pyro
import lib1;
assert $is_module(lib1);
assert lib1::mod_name == "lib1";
assert lib1::get_mod_name() == "lib1";
assert lib1::add(1, 2) == 3;

var func1 = lib1::get_mod_name;
assert func1() == "lib1";

# ./lib2/self.pyro
import lib2;
assert $is_module(lib2);
assert lib2::mod_name == "lib2";
assert lib2::get_mod_name() == "lib2";
assert lib2::add(1, 2) == 3;

var func2 = lib2::get_mod_name;
assert func2() == "lib2";

# ./lib2/child1.pyro
import lib2::child1 as l2_child1;
assert $is_module(l2_child1);
assert l2_child1::mod_name == "lib2::child1";
assert l2_child1::get_mod_name() == "lib2::child1";
assert l2_child1::add(1, 2) == 3;

var func3 = l2_child1::get_mod_name;
assert func3() == "lib2::child1";

# ./lib3/
import lib3;
assert $is_module(lib3);

# ./lib3/child1.pyro
import lib3::child1 as l3_child1;
assert $is_module(l3_child1);
assert l3_child1::mod_name == "lib3::child1";
assert l3_child1::get_mod_name() == "lib3::child1";
assert l3_child1::add(1, 2) == 3;

var func4 = l3_child1::get_mod_name;
assert func4() == "lib3::child1";

# Test parent importing child.
lib2::test_importing_child();

# Test child importing parent and sibling.
l2_child1::test_importing_parent();
l2_child1::test_importing_sibling();

# Test methods defined on the module object itself.
assert $is_module(math);
assert math:has_member("abs");
assert $is_callable(math:member("abs"));
assert $is_map(math:globals());
assert "abs" in math:globals();
