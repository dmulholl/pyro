assert !$is_tup(123);

var foo = $tup();
assert $is_tup(foo);
assert foo:count() == 0;

var bar = $tup(123);
assert $is_tup(bar);
assert bar:count() == 1;
assert bar:get(0) == 123;

var baz = $tup(123, "abc", true);
assert $is_tup(baz);
assert baz:count() == 3;

assert baz:get(0) == 123;
assert baz:get(1) == "abc";
assert baz:get(2) == true;

assert baz[0] == 123;
assert baz[1] == "abc";
assert baz[2] == true;

assert foo == $tup();
assert bar == $tup(123);
assert baz == $tup(123, "abc", true);

var map = {
    123 = "alpha",
    $tup(123, 456) = "beta",
    $tup(789, "foo") = "gamma",
};

assert map[$tup(123, 456)] == "beta";

var bam = $tup(789, "foo");
assert map[bam] == "gamma";

assert $str($tup()) == "()";

var tup = $tup("foo", 123, 'a', true);
assert $str(tup) == `("foo", 123, 'a', true)`;

def $test_tuple_comparisons() {
    assert $tup(1, 2, 3) < $tup(1, 2, 4);
    assert $tup(1, 2) < $tup(1, 2, 3);

    assert $tup(1, 2, 3) <= $tup(1, 2, 3);
    assert $tup(1, 2, 3) <= $tup(1, 2, 4);
    assert $tup(1, 2) <= $tup(1, 2, 3);

    assert $tup(1, 2, 3) > $tup(1, 2, 2);
    assert $tup(1, 2, 3) > $tup(1, 2);

    assert $tup(1, 2, 3) >= $tup(1, 2, 3);
    assert $tup(1, 2, 3) >= $tup(1, 2, 2);
    assert $tup(1, 2, 3) >= $tup(1, 2);

    assert $tup(1, 1) < $tup(1, 1, 1);
    assert $tup(1, 1, 1) < $tup(1, 1, 1, 1);
}

def $test_slice() {
    var tup = $tup("foo", "bar", "baz");

    assert tup:slice(0) == $tup("foo", "bar", "baz");
    assert tup:slice(1) == $tup("bar", "baz");
    assert tup:slice(2) == $tup("baz");
    assert tup:slice(3) == $tup();
    assert $is_err(try tup:slice(4));

    assert tup:slice(-1) == $tup("baz");
    assert tup:slice(-2) == $tup("bar", "baz");
    assert tup:slice(-3) == $tup("foo", "bar", "baz");
    assert $is_err(try tup:slice(-4));

    assert tup:slice(0, 0) == $tup();
    assert tup:slice(0, 1) == $tup("foo");
    assert tup:slice(0, 2) == $tup("foo", "bar");
    assert tup:slice(0, 3) == $tup("foo", "bar", "baz");
    assert $is_err(try tup:slice(0, 4));

    assert tup:slice(1, 2) == $tup("bar", "baz");
    assert tup:slice(2, 1) == $tup("baz");
    assert tup:slice(3, 0) == $tup();
    assert $is_err(try tup:slice(4, 0));
    assert $is_err(try tup:slice(4, 1));

    assert tup:slice(-1, 1) == $tup("baz");
    assert tup:slice(-2, 2) == $tup("bar", "baz");
    assert tup:slice(-3, 3) == $tup("foo", "bar", "baz");
    assert $is_err(try tup:slice(-4, 0));
    assert $is_err(try tup:slice(-4, 1));
}

def $test_iterating_over_tuple() {
    var sum = 0;
    for value in $tup(1, 2, 3) {
        sum += value;
    }
    assert sum == 6;
}

def $test_iter_method() {
    assert $is_iter($tup():values());
    assert $is_iter($tup(123, 456):values());

    var sum = 0;
    for value in $tup(1, 2, 3):values() {
        sum += value;
    }
    assert sum == 6;
}

def $test_contains() {
    var tup = $tup(123, 456, 789);
    assert tup:contains(123);
    assert tup:contains(789);
    assert !tup:contains(0);
    assert !tup:contains("foo");
}

def $test_in() {
    var tup = $tup(123, 456, 789);
    assert 123 in tup;
    assert 456 in tup;
    assert 789 in tup;
    assert "abc" in tup == false;
    assert false == "abc" in tup;
    assert !("abc" in tup);
}

def $test_tuple_literals() {
    assert $is_tup(());
    assert ():count() == 0;
    assert () == ();

    assert !$is_tup((123));
    assert (123) == 123;

    assert $is_tup((123,));
    assert (123,) == $tup(123);
    assert (123,):count() == 1;

    assert $is_tup((123, 456));
    assert (123, 456) == $tup(123, 456);
    assert (123, 456):count() == 2;

    assert $is_tup((123, 456,));
    assert (123, 456,) == $tup(123, 456);
    assert (123, 456,):count() == 2;

    assert (1 + 2) == 3;
    assert (1 + 2,) == $tup(3);
}

def $test_compare_empty_tuples() {
    assert () == ();
    assert $tup() == $tup();
    assert () == $tup();
    assert $tup() == ();

    var foo = ();
    var bar = $tup();
    assert foo == foo;
    assert bar == bar;
    assert foo == bar;
    assert bar == foo;

    assert () <= ();
    assert () >= ();

    assert () < (1,);
    assert () < (1, 2);

    assert (1,) > ();
    assert (1, 2) > ();
}

def $test_negative_indexing() {
    var tup = ("foo", "bar", "baz");

    assert tup[-1] == "baz";
    assert tup[-2] == "bar";
    assert tup[-3] == "foo";

    assert $is_err(try tup[-4]);
}

def $test_negative_indexing_with_get() {
    var tup = ("foo", "bar", "baz");

    assert tup:get(-1) == "baz";
    assert tup:get(-2) == "bar";
    assert tup:get(-3) == "foo";

    assert $is_err(try tup:get(-4));
}

def $test_concatenation() {
    with tup = () + () {
        assert $is_tup(tup);
        assert tup:count() == 0;
    }

    with tup = ("abc", "def") + () {
        assert $is_tup(tup);
        assert tup:count() == 2;
        assert tup[0] == "abc";
    }

    with tup = () + ("ghi", "jkl") {
        assert $is_tup(tup);
        assert tup:count() == 2;
        assert tup[0] == "ghi";
    }

    with tup = ("abc", "def") + ("ghi", "jkl") {
        assert $is_tup(tup);
        assert tup:count() == 4;
        assert tup[0] == "abc";
        assert tup[2] == "ghi";
    }

    var t1 = ("abc", "def");
    var t2 = ("ghi", "jkl");
    var t3 = t1 + t2;
    assert $is_tup(t3);
    assert t3 != t1;
    assert t3 != t2;
    assert t3:count() == 4;
    assert t3[0] == "abc";
    assert t3[2] == "ghi";
}

def $test_iteration_order_with_for_loop() {
    var tup = ('a', 'b', 'c');

    var result = [];
    for value in tup {
        result:append(value);
    }

    assert result:count() == 3;
    assert result[0] == 'a';
    assert result[1] == 'b';
    assert result[2] == 'c';
}


def $test_iteration_order_with_iter_function() {
    var tup = ('a', 'b', 'c');

    var result = $iter(tup):to_vec();

    assert result:count() == 3;
    assert result[0] == 'a';
    assert result[1] == 'b';
    assert result[2] == 'c';
}


def $test_iteration_order_with_values_method() {
    var tup = ('a', 'b', 'c');

    var result = tup:values():to_vec();

    assert result:count() == 3;
    assert result[0] == 'a';
    assert result[1] == 'b';
    assert result[2] == 'c';
}
