assert !$is_tup(123);

var foo = $tup();
assert $is_tup(foo);
assert foo:count() == 0;

var bar = $tup(123);
assert $is_tup(bar);
assert bar:count() == 1;
assert bar:get(0) == 123;

var baz = $tup(123, "abc", true);
assert $is_tup(baz);
assert baz:count() == 3;

assert baz:get(0) == 123;
assert baz:get(1) == "abc";
assert baz:get(2) == true;

assert baz[0] == 123;
assert baz[1] == "abc";
assert baz[2] == true;

assert foo == $tup();
assert bar == $tup(123);
assert baz == $tup(123, "abc", true);

var map = {
    123 = "alpha",
    $tup(123, 456) = "beta",
    $tup(789, "foo") = "gamma",
};

assert map[$tup(123, 456)] == "beta";

var bam = $tup(789, "foo");
assert map[bam] == "gamma";

assert $str($tup()) == "()";

var tup = $tup("foo", 123, 'a', true);
assert $str(tup) == `("foo", 123, 'a', true)`;


def $test_tuple_comparisons() {
    assert $tup(1, 2, 3) < $tup(1, 2, 4);
    assert $tup(1, 2) < $tup(1, 2, 3);

    assert $tup(1, 2, 3) <= $tup(1, 2, 3);
    assert $tup(1, 2, 3) <= $tup(1, 2, 4);
    assert $tup(1, 2) <= $tup(1, 2, 3);

    assert $tup(1, 2, 3) > $tup(1, 2, 2);
    assert $tup(1, 2, 3) > $tup(1, 2);

    assert $tup(1, 2, 3) >= $tup(1, 2, 3);
    assert $tup(1, 2, 3) >= $tup(1, 2, 2);
    assert $tup(1, 2, 3) >= $tup(1, 2);
}

def $test_slice() {
    var tup = $tup("foo", "bar", "baz");

    assert tup:slice(0) == $tup("foo", "bar", "baz");
    assert tup:slice(1) == $tup("bar", "baz");
    assert tup:slice(2) == $tup("baz");
    assert tup:slice(3) == $tup();
    assert $is_err(try tup:slice(4));

    assert tup:slice(-1) == $tup("baz");
    assert tup:slice(-2) == $tup("bar", "baz");
    assert tup:slice(-3) == $tup("foo", "bar", "baz");
    assert $is_err(try tup:slice(-4));

    assert tup:slice(0, 0) == $tup();
    assert tup:slice(0, 1) == $tup("foo");
    assert tup:slice(0, 2) == $tup("foo", "bar");
    assert tup:slice(0, 3) == $tup("foo", "bar", "baz");
    assert $is_err(try tup:slice(0, 4));

    assert tup:slice(1, 2) == $tup("bar", "baz");
    assert tup:slice(2, 1) == $tup("baz");
    assert tup:slice(3, 0) == $tup();
    assert $is_err(try tup:slice(4, 0));
    assert $is_err(try tup:slice(4, 1));

    assert tup:slice(-1, 1) == $tup("baz");
    assert tup:slice(-2, 2) == $tup("bar", "baz");
    assert tup:slice(-3, 3) == $tup("foo", "bar", "baz");
    assert $is_err(try tup:slice(-4, 0));
    assert $is_err(try tup:slice(-4, 1));
}

def $test_iterating_over_tuple() {
    var sum = 0;
    for value in $tup(1, 2, 3) {
        sum += value;
    }
    assert sum == 6;
}

def $test_iter_method() {
    assert $is_iter($tup():iter());
    assert $is_iter($tup(123, 456):iter());

    var sum = 0;
    for value in $tup(1, 2, 3):iter() {
        sum += value;
    }
    assert sum == 6;
}

def $test_contains() {
    var tup = $tup(123, 456, 789);
    assert tup:contains(123);
    assert tup:contains(789);
    assert !tup:contains(0);
    assert !tup:contains("foo");
}

def $test_in() {
    var tup = $tup(123, 456, 789);
    assert 123 in tup;
    assert 456 in tup;
    assert 789 in tup;
    assert "abc" in tup == false;
    assert false == "abc" in tup;
    assert !("abc" in tup);
}

def $test_tuple_literals() {
    assert $is_tup(());
    assert ():count() == 0;
    assert () == ();

    assert !$is_tup((123));
    assert (123) == 123;

    assert $is_tup((123,));
    assert (123,) == $tup(123);
    assert (123,):count() == 1;

    assert $is_tup((123, 456));
    assert (123, 456) == $tup(123, 456);
    assert (123, 456):count() == 2;

    assert $is_tup((123, 456,));
    assert (123, 456,) == $tup(123, 456);
    assert (123, 456,):count() == 2;
}
