assert !$is_tup(123);

var foo = $tup();
assert $is_tup(foo);
assert foo:count() == 0;

var bar = $tup(123);
assert $is_tup(bar);
assert bar:count() == 1;
assert bar:get(0) == 123;

var baz = $tup(123, "abc", true);
assert $is_tup(baz);
assert baz:count() == 3;

assert baz:get(0) == 123;
assert baz:get(1) == "abc";
assert baz:get(2) == true;

assert baz[0] == 123;
assert baz[1] == "abc";
assert baz[2] == true;

assert foo == $tup();
assert bar == $tup(123);
assert baz == $tup(123, "abc", true);

var map = {
    123 = "alpha",
    $tup(123, 456) = "beta",
    $tup(789, "foo") = "gamma",
};

assert map[$tup(123, 456)] == "beta";

var bam = $tup(789, "foo");
assert map[bam] == "gamma";

assert $str($tup()) == "()";

var tup = $tup("foo", 123, 'a', true);
assert $str(tup) == `("foo", 123, 'a', true)`;


def $test_tuple_comparisons() {
    assert $tup(1, 2, 3) < $tup(1, 2, 4);
    assert $tup(1, 2) < $tup(1, 2, 3);

    assert $tup(1, 2, 3) <= $tup(1, 2, 3);
    assert $tup(1, 2, 3) <= $tup(1, 2, 4);
    assert $tup(1, 2) <= $tup(1, 2, 3);

    assert $tup(1, 2, 3) > $tup(1, 2, 2);
    assert $tup(1, 2, 3) > $tup(1, 2);

    assert $tup(1, 2, 3) >= $tup(1, 2, 3);
    assert $tup(1, 2, 3) >= $tup(1, 2, 2);
    assert $tup(1, 2, 3) >= $tup(1, 2);
}
