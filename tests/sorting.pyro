def $test_integers() {
    var vec = $vec($range(1000));
    $std::prng::shuffle(vec);
    vec:sort();

    assert vec[0] == 0;
    assert vec[123] == 123;
    assert vec[456] == 456;
    assert vec[789] == 789;
    assert vec[999] == 999;
}


def $test_strings() {
    var vec = ["a", "aaa", "aaa", "ab", "abc", "abcd", "def", "zzz"];
    $std::prng::shuffle(vec);
    vec:sort();

    assert vec[0] == "a";
    assert vec[1] == "aaa";
    assert vec[2] == "aaa";
    assert vec[3] == "ab";
    assert vec[4] == "abc";
    assert vec[5] == "abcd";
    assert vec[6] == "def";
    assert vec[7] == "zzz";
}


def $test_stability_for_values_that_compare_equal() {
    var vec = [100, 97, 200, 97.0, 300, 'a', 400, 'b', 500, 98.0, 600, 98, 700, 99.0, 'c', 99];
    vec:sort();

    assert $is_i64(vec[0]) && vec[0] == 97;
    assert $is_f64(vec[1]) && vec[1] == 97.0;
    assert $is_char(vec[2]) && vec[2] == 'a';
    assert $is_char(vec[3]) && vec[3] == 'b';
    assert $is_f64(vec[4]) && vec[4] == 98.0;
    assert $is_i64(vec[5]) && vec[5] == 98;
    assert $is_f64(vec[6]) && vec[6] == 99.0;
    assert $is_char(vec[7]) && vec[7] == 'c';
    assert $is_i64(vec[8]) && vec[8] == 99;
    assert vec[9] == 100;
    assert vec[10] == 200;
    assert vec[11] == 300;
    assert vec[12] == 400;
    assert vec[13] == 500;
    assert vec[14] == 600;
    assert vec[15] == 700;
}


def $test_custom_comparison_func_1() {
    def always_false(a, b) {
        return false;
    }

    var vec = [5, 2, 7, 7, 1, 3];
    vec:sort(always_false);

    assert vec[0] == 5;
    assert vec[1] == 2;
    assert vec[2] == 7;
    assert vec[3] == 7;
    assert vec[4] == 1;
    assert vec[5] == 3;
}


def $test_custom_comparison_func_2() {
    def std(a, b) {
        return a < b;
    }

    var vec = [5, 2, 7, 7, 1, 3];
    vec:sort(std);

    assert vec[0] == 1;
    assert vec[1] == 2;
    assert vec[2] == 3;
    assert vec[3] == 5;
    assert vec[4] == 7;
    assert vec[5] == 7;
}


def $test_custom_comparison_func_3() {
    def rev(a, b) {
        return a > b;
    }

    var vec = [5, 2, 7, 7, 1, 3];
    vec:sort(rev);

    assert vec[0] == 7;
    assert vec[1] == 7;
    assert vec[2] == 5;
    assert vec[3] == 3;
    assert vec[4] == 2;
    assert vec[5] == 1;
}
