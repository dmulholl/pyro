def $test_integers() {
    var vec = $vec($range(1000));
    $std::prng::shuffle(vec);
    vec:sort();

    assert vec[0] == 0;
    assert vec[123] == 123;
    assert vec[456] == 456;
    assert vec[789] == 789;
    assert vec[999] == 999;
}


def $test_strings() {
    var vec = ["a", "aaa", "aaa", "ab", "abc", "abcd", "def", "zzz"];
    $std::prng::shuffle(vec);
    vec:sort();

    assert vec[0] == "a";
    assert vec[1] == "aaa";
    assert vec[2] == "aaa";
    assert vec[3] == "ab";
    assert vec[4] == "abc";
    assert vec[5] == "abcd";
    assert vec[6] == "def";
    assert vec[7] == "zzz";
}


def $test_custom_comparison_func_1() {
    def equal(a, b) {
        return 0;
    }

    var vec = [5, 2, 7, 7, 1, 3];
    vec:sort(equal);

    assert vec[0] == 5;
    assert vec[1] == 2;
    assert vec[2] == 7;
    assert vec[3] == 7;
    assert vec[4] == 1;
    assert vec[5] == 3;
}


def $test_custom_comparison_func_2() {
    def std(a, b) {
        if (a == b) {
            return 0;
        }
        return a < b ? -1 :| 1;
    }

    var vec = [5, 2, 7, 7, 1, 3];
    vec:sort(std);

    assert vec[0] == 1;
    assert vec[1] == 2;
    assert vec[2] == 3;
    assert vec[3] == 5;
    assert vec[4] == 7;
    assert vec[5] == 7;
}


def $test_custom_comparison_func_3() {
    def rev(a, b) {
        if (a == b) {
            return 0;
        }
        return a < b ? 1 :| -1;
    }

    var vec = [5, 2, 7, 7, 1, 3];
    vec:sort(rev);

    assert vec[0] == 7;
    assert vec[1] == 7;
    assert vec[2] == 5;
    assert vec[3] == 3;
    assert vec[4] == 2;
    assert vec[5] == 1;
}
