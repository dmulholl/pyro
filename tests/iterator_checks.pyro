# Vectors.
var vec = ["foo", "bar"];

assert $is_err(try def() {
    for item in vec {
        vec:append("baz");
    }
}());

assert $is_err(try def() {
    for item in vec {
        vec[0] = "baz";
    }
}());

assert $is_err(try def() {
    for item in vec {
        vec:sort();
    }
}());

assert $is_err(try def() {
    for item in vec {
        vec:shuffle();
    }
}());

assert $is_err(try def() {
    for item in vec:iter() {
        vec:append("baz");
    }
}());

assert $is_err(try def() {
    for item in vec {
        vec:clear();
    }
}());

# Stacks.
var stack = $stack();
stack:push("foo");
stack:push("bar");

assert $is_err(try def() {
    for item in stack {
        stack:push("baz");
    }
}());

assert $is_err(try def() {
    for item in stack {
        stack:pop();
    }
}());

assert $is_err(try def() {
    for item in stack:iter() {
        stack:push("baz");
    }
}());

assert $is_err(try def() {
    for item in stack {
        stack:clear();
    }
}());

# Maps.
var map = {"foo" = 123, "bar" = 456};

assert $is_err(try def() {
    for entry in map {
        map["baz"] = 789;
    }
}());

assert $is_err(try def() {
    for entry in map {
        map:set("baz",  789);
    }
}());

assert $is_err(try def() {
    for entry in map:iter() {
        map["baz"] = 789;
    }
}());

assert $is_err(try def() {
    for entry in map:iter() {
        map:set("baz",  789);
    }
}());

assert $is_err(try def() {
    for key in map:keys() {
        map["baz"] = 789;
    }
}());

assert $is_err(try def() {
    for key in map:keys() {
        map:set("baz",  789);
    }
}());

assert $is_err(try def() {
    for value in map:values() {
        map["baz"] = 789;
    }
}());

assert $is_err(try def() {
    for value in map:values() {
        map:set("baz",  789);
    }
}());

assert $is_err(try def() {
    for entry in map {
        map:clear();
    }
}());

# Sets.
var set = {123, 456};

assert $is_err(try def() {
    for item in set {
        set:add(789);
    }
}());

assert $is_err(try def() {
    for item in set {
        set:remove(123);
    }
}());

assert $is_err(try def() {
    for item in set {
        set:clear();
    }
}());
