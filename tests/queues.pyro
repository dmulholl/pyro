assert !$is_queue("foobar");

var foo = $queue();
assert $is_queue(foo);
assert foo:count() == 0;
assert foo:is_empty();
assert $is_err(foo:dequeue());
assert $is_err(foo:peek());
assert !("xyz" in foo);
assert !foo:contains("xyz");

foo:enqueue("abc");
assert foo:count() == 1;
assert !foo:is_empty();
assert foo:peek() == "abc";
assert "abc" in foo;
assert foo:contains("abc");
assert !("xyz" in foo);
assert !foo:contains("xyz");

foo:enqueue("def");
assert foo:count() == 2;
assert !foo:is_empty();
assert foo:peek() == "abc";
assert "def" in foo;
assert foo:contains("def");
assert !("xyz" in foo);
assert !foo:contains("xyz");

foo:enqueue("ghi");
assert foo:count() == 3;
assert !foo:is_empty();
assert foo:peek() == "abc";
assert "ghi" in foo;
assert foo:contains("ghi");
assert !("xyz" in foo);
assert !foo:contains("xyz");

assert foo:dequeue() == "abc";
assert foo:dequeue() == "def";
assert foo:dequeue() == "ghi";

assert foo:count() == 0;
assert foo:is_empty();
assert !("abc" in foo);
assert !foo:contains("abc");
assert !("xyz" in foo);
assert !foo:contains("xyz");

for i in $range(100) {
    foo:enqueue(i);
}

assert foo:count() == 100;

for i in $range(100) {
    assert foo:dequeue() == i;
}

assert foo:count() == 0;
assert foo:is_empty();

def $test_clear() {
    var queue = $queue();
    assert queue:count() == 0;

    queue:enqueue("foo");
    queue:enqueue("bar");
    assert queue:count() == 2;

    queue:clear();
    assert queue:count() == 0;

    queue:enqueue(1);
    queue:enqueue(2);
    assert queue:dequeue() == 1;
    assert queue:dequeue() == 2;
}

def $test_iteration_order_with_for_loop() {
    var queue = $queue();

    queue:enqueue('a');
    queue:enqueue('b');
    queue:enqueue('c');

    var vec = [];

    for value in queue {
        vec:append(value);
    }

    assert vec:count() == 3;
    assert vec[0] == 'a';
    assert vec[1] == 'b';
    assert vec[2] == 'c';
}

def $test_iteration_order_with_iter_function() {
    var queue = $queue();

    queue:enqueue('a');
    queue:enqueue('b');
    queue:enqueue('c');

    var vec = $iter(queue):to_vec();

    assert vec:count() == 3;
    assert vec[0] == 'a';
    assert vec[1] == 'b';
    assert vec[2] == 'c';
}

def $test_iteration_order_with_values_method() {
    var queue = $queue();

    queue:enqueue('a');
    queue:enqueue('b');
    queue:enqueue('c');

    var vec = queue:values():to_vec();

    assert vec:count() == 3;
    assert vec[0] == 'a';
    assert vec[1] == 'b';
    assert vec[2] == 'c';
}
