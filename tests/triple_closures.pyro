var global;

def outer_func(outer_arg) {
    var outer_local = global + outer_arg + 1;

    def middle_func(middle_arg) {
        var middle_local = global + outer_local + middle_arg + 2;

        def inner_func(inner_arg) {
            var inner_local = global + outer_local + middle_local + inner_arg + 3;
            return inner_local;
        }

        return inner_func;
    }

    return middle_func;
}

var global = 1;
var middle_closure = outer_func(2);
var inner_closure = middle_closure(3);
assert 101 + 102 + 103 + 104 + 105 == 515; # Overwrite the stack with garbage.
assert inner_closure(4) == (1) + (1 + 2 + 1) + (1 + (1 + 2 + 1) + 3 + 2) + (4) + 3;
assert inner_closure(5) == (1) + (1 + 2 + 1) + (1 + (1 + 2 + 1) + 3 + 2) + (5) + 3;

var global = 2;
var middle_closure = outer_func(3);
var inner_closure = middle_closure(4);
assert 101 + 102 + 103 + 104 + 105 == 515; # Overwrite the stack with garbage.
assert inner_closure(5) == (2) + (2 + 3 + 1) + (2 + (2 + 3 + 1) + 4 + 2) + (5) + 3;
assert inner_closure(6) == (2) + (2 + 3 + 1) + (2 + (2 + 3 + 1) + 4 + 2) + (6) + 3;

var global = 3;
var middle_closure = outer_func(4);
var inner_closure = middle_closure(5);
assert 101 + 102 + 103 + 104 + 105 == 515; # Overwrite the stack with garbage.
assert inner_closure(6) == (3) + (3 + 4 + 1) + (3 + (3 + 4 + 1) + 5 + 2) + (6) + 3;
assert inner_closure(7) == (3) + (3 + 4 + 1) + (3 + (3 + 4 + 1) + 5 + 2) + (7) + 3;
