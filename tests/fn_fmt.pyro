assert $is_err(try $fmt());

assert $fmt("") == "";
assert $fmt("", "foo") == "";
assert $fmt("", "foo", 123) == "";

assert $fmt("foo") == "foo";


def $test_empty_placeholders() {
    assert $fmt("{}", true) == "true";
    assert $fmt("{}", false) == "false";
    assert $fmt("{}", null) == "null";

    assert $fmt("{}", 1) == "1";
    assert $fmt("{}", 12) == "12";
    assert $fmt("{}", 123) == "123";

    assert $fmt("{}", 1.0) == "1.0";
    assert $fmt("{}", 1.00) == "1.0";
    assert $fmt("{}", 1.0023) == "1.0023";
    assert $fmt("{}", 1.00230000) == "1.0023";

    assert $fmt("{}", "foo") == "foo";
    assert $fmt("foo {} bar", 123) == "foo 123 bar";

    assert $fmt("{} and {}", 123, 456) == "123 and 456";
    assert $fmt("{} and {}", 123.456, "foobar") == "123.456 and foobar";
    assert $fmt("foo {} bar {} baz", 123, 456) == "foo 123 bar 456 baz";
}


def $test_unterminated_placeholders() {
    assert $is_err(try $fmt("{"));
    assert $is_err(try $fmt("foo {"));
    assert $is_err(try $fmt("foo { bar"));
    assert $is_err(try $fmt("foo {} bar { baz", 123));
}


def $test_insufficient_arguments() {
    assert $is_err(try $fmt("{}"));
    assert $is_err(try $fmt("{} and {}", 123));
    assert $is_err(try $fmt("{} and {} and {}", 123, 456));
}


def $test_escaped_placeholders() {
    assert $fmt("\{") == "{";
    assert $fmt("foo \{ bar") == "foo { bar";
    assert $fmt("foo \{bar} baz") == "foo {bar} baz";
}


def $test_placeholders_with_indexes() {
    assert $fmt("{0}", 123, 456, 789) == "123";
    assert $fmt("{0} and {0}", 123, 456, 789) == "123 and 123";
    assert $fmt("{1} and {0}", 123, 456, 789) == "456 and 123";
    assert $fmt("{2} and {1} and {0}", 123, 456, 789) == "789 and 456 and 123";
    assert $fmt("{} and {0}", 123, 456, 789) == "123 and 123";
    assert $fmt("{0} and {}", 123, 456, 788) == "123 and 123";
    assert $fmt("{} and {2} and {}", 123, 456, 789) == "123 and 789 and 456";
    assert $is_err(try $fmt("{999}", 123, 456, 789));
}


def $test_placeholers_with_indexes_and_specifiers() {
    assert $fmt("{0:05d} and {1:05d}", 123, 456) == "00123 and 00456";
    assert $fmt("{1:05d} and {0:05d}", 123, 456) == "00456 and 00123";
}


def $test_formatting_f64() {
    assert $fmt("{:.2f}", 1.23456) == "1.23";
    assert $fmt("{:5.2f}", 1.23456) == " 1.23";
    assert $fmt("{:05.2f}", 1.23456) == "01.23";
    assert $is_err(try $fmt("{:xyz}", 1.23456));
}


def $test_formatting_decimal_i64() {
    assert $fmt("{:d}", 123) == "123";
    assert $fmt("{:4d}", 123) == " 123";
    assert $fmt("{:04d}", 123) == "0123";
    assert $is_err(try $fmt("{:xyz}", 123));
}


def $test_formatting_octal_i64() {
    assert $fmt("{:o}", 123) == "173";
    assert $fmt("{:4o}", 123) == " 173";
    assert $fmt("{:04o}", 123) == "0173";
}


def $test_formatting_lowercase_hex_i64() {
    assert $fmt("{:x}", 123) == "7b";
    assert $fmt("{:4x}", 123) == "  7b";
    assert $fmt("{:04x}", 123) == "007b";
}


def $test_formatting_uppercase_hex_i64() {
    assert $fmt("{:X}", 123) == "7B";
    assert $fmt("{:4X}", 123) == "  7B";
    assert $fmt("{:04X}", 123) == "007B";
}


def $test_formatting_char() {
    assert $fmt("{:d}", 'z') == "122";
    assert $fmt("{:o}", 'z') == "172";
    assert $fmt("{:x}", 'z') == "7a";
    assert $fmt("{:X}", 'z') == "7A";
    assert $fmt("{:04d}", 'z') == "0122";
    assert $fmt("{:04o}", 'z') == "0172";
    assert $fmt("{:04x}", 'z') == "007a";
    assert $fmt("{:04X}", 'z') == "007A";
}


def $test_formatting_string() {
    assert $fmt("{:5}", "foo") == "  foo";
    assert $fmt("{:-5}", "foo") == "foo  ";

    assert $fmt("{:5}", "foobar") == "foobar";
    assert $fmt("{:-5}", "foobar") == "foobar";

    assert $fmt("{:0}", "foobar") == "foobar";
    assert $fmt("{:-0}", "foobar") == "foobar";

    assert $fmt("{:5}", "") == "     ";
    assert $fmt("{:-5}", "") == "     ";
}


class Foo {
    def $str() {
        return "<foo>";
    }

    def $fmt(arg) {
        return "<" + arg + ">";
    }
}


def $test_custom_methods() {
    var foo = Foo();
    assert $str(foo) == "<foo>";
    assert $fmt("{}", foo) == "<foo>";
    assert $fmt("{:xyz}", foo) == "<xyz>";
}
