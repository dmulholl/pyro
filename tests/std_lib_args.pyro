import $std::args;

# Test setup.

def $test_setup() {
    var parser = args::ArgParser()
        :helptext("foo")
        :version("bar");
    assert parser:helptext() == "foo";
    assert parser:version() == "bar";
}

# Test flags.

def $test_flag_empty() {
    var parser = args::ArgParser();
    parser:flag("foo f");
    parser:parse_args([]);
    assert parser:found("foo") == false;
    assert parser:count("foo") == 0;
    assert parser:found("f") == false;
    assert parser:count("f") == 0;
}

def $test_flag_missing() {
    var parser = args::ArgParser();
    parser:flag("foo f");
    parser:parse_args(["bar", "baz"]);
    assert parser:found("foo") == false;
    assert parser:count("foo") == 0;
    assert parser:found("f") == false;
    assert parser:count("f") == 0;
}

def $test_flag_long() {
    var parser = args::ArgParser();
    parser:flag("foo f");
    parser:parse_args(["--foo"]);
    assert parser:found("foo") == true;
    assert parser:count("foo") == 1;
    assert parser:found("f") == true;
    assert parser:count("f") == 1;
}

def $test_flag_short() {
    var parser = args::ArgParser();
    parser:flag("foo f");
    parser:parse_args(["-f"]);
    assert parser:found("foo") == true;
    assert parser:count("foo") == 1;
    assert parser:found("f") == true;
    assert parser:count("f") == 1;
}

def $test_flag_multiple() {
    var parser = args::ArgParser();
    parser:flag("foo f");
    parser:parse_args(["-fff",  "--foo"]);
    assert parser:found("foo") == true;
    assert parser:count("foo") == 4;
    assert parser:found("f") == true;
    assert parser:count("f") == 4;
}

# Test options.

def $test_option_empty() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args([]);
    assert parser:found("opt") == false;
    assert parser:count("opt") == 0;
    assert parser:value("opt") == null;
    assert parser:found("o") == false;
    assert parser:count("o") == 0;
    assert parser:value("o") == null;
}

def $test_option_missing() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args(["bar", "baz"]);
    assert parser:found("opt") == false;
    assert parser:count("opt") == 0;
    assert parser:value("opt") == null;
    assert parser:found("o") == false;
    assert parser:count("o") == 0;
    assert parser:value("o") == null;
}

def $test_option_long() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args(["--opt", "blah"]);
    assert parser:found("opt") == true;
    assert parser:count("opt") == 1;
    assert parser:value("opt") == "blah";
    assert parser:found("o") == true;
    assert parser:count("o") == 1;
    assert parser:value("o") == "blah";
}

def $test_option_short() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args(["-o", "blah"]);
    assert parser:found("opt") == true;
    assert parser:count("opt") == 1;
    assert parser:value("opt") == "blah";
    assert parser:found("o") == true;
    assert parser:count("o") == 1;
    assert parser:value("o") == "blah";
}

def $test_option_long_equals() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args(["--opt=blah"]);
    assert parser:found("opt") == true;
    assert parser:count("opt") == 1;
    assert parser:value("opt") == "blah";
}

def $test_option_short_equals() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args(["-o=blah"]);
    assert parser:found("opt") == true;
    assert parser:count("opt") == 1;
    assert parser:value("opt") == "blah";
}

def $test_option_multiple() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args(["--opt=foo", "--opt", "bar", "-o", "baz"]);
    assert parser:found("opt") == true;
    assert parser:count("opt") == 3;
    assert parser:value("opt") == "baz";
    assert parser:values("opt"):count() == 3;
    assert parser:values("opt")[0] == "foo";
    assert parser:values("opt")[1] == "bar";
    assert parser:values("opt")[2] == "baz";
}

def $test_option_with_default_value() {
    var parser = args::ArgParser();
    parser:option("opt o", "value");
    parser:parse_args([]);
    assert parser:found("opt") == false;
    assert parser:count("opt") == 0;
    assert parser:value("opt") == "value";
    assert parser:found("o") == false;
    assert parser:count("o") == 0;
    assert parser:value("o") == "value";
}

def $test_option_with_integer_value() {
    var parser = args::ArgParser();
    parser:option("opt o", 0, $i64);
    parser:parse_args(["--opt", "123"]);
    assert parser:found("opt") == true;
    assert parser:count("opt") == 1;
    assert parser:value("opt") == 123;
    assert parser:found("o") == true;
    assert parser:count("o") == 1;
    assert parser:value("o") == 123;
}

def $test_option_with_negative_integer_value() {
    var parser = args::ArgParser();
    parser:option("opt o", 0, $i64);
    parser:parse_args(["--opt", "-123"]);
    assert parser:found("opt") == true;
    assert parser:count("opt") == 1;
    assert parser:value("opt") == -123;
}

def $test_option_with_integer_default_value() {
    var parser = args::ArgParser();
    parser:option("opt o", 123);
    parser:parse_args([]);
    assert parser:found("opt") == false;
    assert parser:count("opt") == 0;
    assert parser:value("opt") == 123;
    assert parser:found("o") == false;
    assert parser:count("o") == 0;
    assert parser:value("o") == 123;
}

def $test_option_with_invalid_value() {
    var parser = args::ArgParser()
        :exit_on_error(false)
        :option("opt o", 0, $i64);
    assert $is_err(try parser:parse_args(["--opt", "xxx"]));
}

def $test_option_with_missing_value() {
    var parser = args::ArgParser()
        :exit_on_error(false)
        :option("opt o");
    assert $is_err(try parser:parse_args(["--opt"]));
}

def $test_option_with_multiple_integers() {
    var parser = args::ArgParser();
    parser:flag("foo f");
    parser:option("opt o", 0, $i64);
    parser:parse_args(["--opt", "123", "-o", "456", "-fo", "789"]);
    assert parser:found("foo");
    assert parser:count("foo") == 1;
    assert parser:found("opt");
    assert parser:count("opt") == 3;
    assert parser:values("opt")[0] == 123;
    assert parser:values("opt")[1] == 456;
    assert parser:values("opt")[2] == 789;
}

# Test unrecognised flags/options.

def $test_unrecognised_long() {
    var parser = args::ArgParser()
        :exit_on_error(false);
    assert $is_err(try parser:parse_args(["--opt", "xxx"]));
}

def $test_unrecognised_short() {
    var parser = args::ArgParser()
        :exit_on_error(false);
    assert $is_err(try parser:parse_args(["-o", "xxx"]));
}

# Test positional arguments.

def $test_positional_args_empty() {
    var parser = args::ArgParser();
    parser:parse_args([]);
    assert parser.args:count() == 0;
}

def $test_positional_args() {
    var parser = args::ArgParser();
    parser:option("opt o");
    parser:parse_args(["foo", "--opt", "value1", "bar", "-o", "value2", "baz"]);
    assert parser.args:count() == 3;
    assert parser.args[0] == "foo";
    assert parser.args[1] == "bar";
    assert parser.args[2] == "baz";
}

def $test_option_parsing_switch() {
    var parser = args::ArgParser();
    parser:parse_args(["foo", "--", "--bar", "-b"]);
    assert parser.args:count() == 3;
}

# Commands.

def $test_command() {
    var parser = args::ArgParser();

    var cmd_parser = parser:command("cmd");
    cmd_parser:flag("foo f");
    cmd_parser:option("opt o");

    parser:parse_args([
        "cmd",
        "--foo",
        "--opt", "value1",
        "arg1", "arg2",
    ]);

    assert parser.command_name == "cmd";
    assert parser.command_parser == cmd_parser;
    assert cmd_parser:found("foo");
    assert cmd_parser:value("opt") == "value1";
    assert cmd_parser.args:count() == 2;
    assert cmd_parser.args[0] == "arg1";
    assert cmd_parser.args[1] == "arg2";
}

# Test chaining.

def $test_chaining_1() {
    var parser = args::ArgParser()
        :helptext("helptext")
        :version("version")
        :flag("flag")
        :option("str1")
        :option("str2", "def2")
        :option("str3", "def3", null)
        :option("int", 0, $i64)
        :option("float", 0.0, $f64);

    parser:parse_args([]);

    assert parser:helptext() == "helptext";
    assert parser:version() == "version";
    assert parser:found("flag") == false;
    assert parser:value("str1") == null;
    assert parser:value("str2") == "def2";
    assert parser:value("str3") == "def3";
    assert parser:value("int") == 0;
    assert parser:value("float") == 0.0;
}

def $test_chaining_2() {
    var parser = args::ArgParser()
        :helptext("helptext")
        :version("version")
        :flag("flag")
        :option("str1")
        :option("str2", "def2")
        :option("str3", "def3", null)
        :option("int", 0, $i64)
        :option("float", 0.0, $f64);

    parser:parse_args([
        "--flag",
        "--str1", "foo",
        "--str2", "bar",
        "--str3", "baz",
        "--int", "123",
        "--float", "456.789",
    ]);

    assert parser:helptext() == "helptext";
    assert parser:version() == "version";
    assert parser:found("flag") == true;
    assert parser:value("str1") == "foo";
    assert parser:value("str2") == "bar";
    assert parser:value("str3") == "baz";
    assert parser:value("int") == 123;
    assert parser:value("float") == 456.789;
}
