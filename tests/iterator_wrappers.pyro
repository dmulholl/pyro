assert $is_iter("abc":chars());

var chars = "abc":chars():to_vec();
assert chars:count() == 3;
assert chars[0] == 'a';
assert chars[1] == 'b';
assert chars[2] == 'c';

var chars = "abc":chars():enumerate():to_vec();
assert chars:count() == 3;
assert chars[0] == $tup(0, 'a');
assert chars[1] == $tup(1, 'b');
assert chars[2] == $tup(2, 'c');

def add_one(n) {
    return n + 1;
}

var nums = $iter([1, 2, 3]):map(add_one):to_vec();
assert nums:count() == 3;
assert nums[0] == 2;
assert nums[1] == 3;
assert nums[2] == 4;

var nums = $iter([1, 2, 3]):map(add_one):map(add_one):to_vec();
assert nums:count() == 3;
assert nums[0] == 3;
assert nums[1] == 4;
assert nums[2] == 5;

def is_big(n) {
    return n >= 5;
}

var nums = $iter([2, 4, 6, 8]):filter(is_big):to_vec();
assert nums:count() == 2;
assert nums[0] == 6;
assert nums[1] == 8;

var nums = $iter([2, 4, 6, 8]):map(add_one):filter(is_big):to_vec();
assert nums:count() == 3;
assert nums[0] == 5;
assert nums[1] == 7;
assert nums[2] == 9;

class Counter {
    var stop;
    var next = 0;

    def $init(stop) {
        self.stop = stop;
    }

    def $iter() {
        return self;
    }

    def $next() {
        if self.next < self.stop {
            self.next += 1;
            return self.next - 1;
        }
        return $err();
    }
}

var counter = $iter(Counter(4)):to_vec();
assert counter:count() == 4;
assert counter[0] == 0;
assert counter[1] == 1;
assert counter[2] == 2;
assert counter[3] == 3;

def is_even(n) {
    return n % 2 == 0;
}

def square(n) {
    return n * n;
}

var vec = $range(10):filter(is_even):map(square):to_vec();
assert vec:count() == 5;
assert vec[0] == 0;
assert vec[1] == 4;
assert vec[2] == 16;
assert vec[3] == 36;
assert vec[4] == 64;


def $test_skip_first() {
    var vec = $range(5):skip_first(3):to_vec();
    assert vec:count() == 2;
    assert vec[0] == 3;
    assert vec[1] == 4;
}


def $test_skip_last() {
    var vec = $range(5):skip_last(3):to_vec();
    assert vec:count() == 2;
    assert vec[0] == 0;
    assert vec[1] == 1;
}


def $test_to_set() {
    var set = "abcabcabc":chars():to_set();
    assert $is_set(set);
    assert set:count() == 3;
    assert set:contains('a');
    assert !set:contains('z');
}


def $test_next() {
    var iter = $range(3);
    assert iter:next() == 0;
    assert iter:next() == 1;
    assert iter:next() == 2;
    assert $is_err(iter:next());
}


def $test_join() {
    assert $range(3):join() == "012";
    assert $range(3):join(",") == "0,1,2";
    assert $is_err(try $range(3):join(123));
    assert $is_err(try $range(3):join(",", 123));
}
