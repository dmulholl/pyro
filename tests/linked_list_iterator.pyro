class Node {
    pub var value;
    pub var next;

    def $init(value) {
        self.value = value;
    }
}

class List {
    var first_node;
    var last_node;

    def $iter() {
        return ListIterator(self.first_node);
    }

    pub def append(value) {
        var node = Node(value);

        if self.last_node == null {
            self.first_node = node;
            self.last_node = node;
            return;
        }

        self.last_node.next = node;
        self.last_node = node;
    }
}

class ListIterator {
    var next_node;

    def $init(first_node) {
        self.next_node = first_node;
    }

    def $next() {
        if self.next_node == null {
            return $err();
        }
        var value = self.next_node.value;
        self.next_node = self.next_node.next;
        return value;
    }
}

var list = List();
list:append("foo");
list:append("bar");
list:append("baz");

var v1 = $vec();
for item in list {
    v1:append(item);
}
assert v1:count() == 3;
assert v1[0] == "foo";
assert v1[1] == "bar";
assert v1[2] == "baz";

var v2 = $vec(list);
assert v2:count() == 3;
assert v2[0] == "foo";
assert v2[1] == "bar";
assert v2[2] == "baz";

var v3 = $iter(list):to_vec();
assert v3:count() == 3;
assert v3[0] == "foo";
assert v3[1] == "bar";
assert v3[2] == "baz";
