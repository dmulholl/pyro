class Object {
    pub var value;

    def $init(value) {
        self.value = value;
    }

    def $op_binary_equals_equals(other) {
        if $is_instance_of(other, Object) {
            return self.value == other.value;
        }
        return self.value == other;
    }

    def $op_binary_plus(other) {
        return Object(self.value + other);
    }

    def $rop_binary_plus(other) {
        return Object(other + self.value);
    }

    def $op_binary_minus(other) {
        return Object(self.value - other);
    }

    def $rop_binary_minus(other) {
        return Object(other - self.value);
    }

    def $op_binary_star(other) {
        return Object(self.value * other);
    }

    def $rop_binary_star(other) {
        return Object(other * self.value);
    }

    def $op_binary_slash(other) {
        return Object(self.value / other);
    }

    def $rop_binary_slash(other) {
        return Object(other / self.value);
    }

    def $op_binary_slash_slash(other) {
        return Object(self.value // other);
    }

    def $rop_binary_slash_slash(other) {
        return Object(other // self.value);
    }

    def $op_binary_percent(other) {
        return Object(self.value % other);
    }

    def $rop_binary_percent(other) {
        return Object(other % self.value);
    }

    def $op_binary_star_star(other) {
        return Object(self.value ** other);
    }

    def $rop_binary_star_star(other) {
        return Object(other ** self.value);
    }

    def $op_binary_bar(other) {
        return Object(self.value | other);
    }

    def $rop_binary_bar(other) {
        return Object(other | self.value);
    }

    def $op_binary_amp(other) {
        return Object(self.value & other);
    }

    def $rop_binary_amp(other) {
        return Object(other & self.value);
    }

    def $op_binary_caret(other) {
        return Object(self.value ^ other);
    }

    def $rop_binary_caret(other) {
        return Object(other ^ self.value);
    }

    def $op_unary_minus() {
        return Object(-self.value);
    }

    def $op_binary_less_less(other) {
        return Object(self.value << other);
    }

    def $rop_binary_less_less(other) {
        return Object(other << self.value);
    }

    def $op_binary_greater_greater(other) {
        return Object(self.value >> other);
    }

    def $rop_binary_greater_greater(other) {
        return Object(other >> self.value);
    }

    def $op_unary_tilde() {
        return Object(~self.value);
    }

    def $op_binary_less(other) {
        return self.value < other;
    }

    def $rop_binary_less(other) {
        return other < self.value;
    }

    def $op_binary_less_equals(other) {
        return self.value <= other;
    }

    def $rop_binary_less_equals(other) {
        return other <= self.value;
    }

    def $op_binary_greater(other) {
        return self.value > other;
    }

    def $rop_binary_greater(other) {
        return other > self.value;
    }
}

var object = Object(0);
assert object.value == 0;

# Equality.
assert Object(0) == Object(0);
assert Object(1) == Object(1);
assert Object(0) != Object(1);

assert Object(1) == 1;
assert 1 == Object(1);

assert Object(0) != 1;
assert 1 != Object(0);

# Comparisons.
assert Object(1) < 2;
assert !(Object(1) < 1);
assert !(Object(1) < 0);

assert 1 < Object(2);
assert !(1 < Object(1));
assert !(1 < Object(0));

assert Object(1) <= 2;
assert Object(1) <= 1;
assert !(Object(1) <= 0);

assert 1 <= Object(2);
assert 1 <= Object(1);
assert !(1 <= Object(0));

assert Object(2) > 1;
assert !(Object(1) > 1);
assert !(Object(0) > 1);

assert 2 > Object(1);
assert !(1 > Object(1));
assert !(0 > Object(1));

# Binary arithmetic.
object = Object(0) + 5;
assert object.value == 5;

object = 5 + Object(0);
assert object.value == 5;

object = Object(0);
object += 5;
assert object.value == 5;

object = Object(0) - 5;
assert object.value == -5;

object = 5 - Object(1);
assert object.value == 4;

object = Object(5);
object -= 3;
assert object.value == 2;

object = Object(10) * 5;
assert object.value == 50;

object = 5 * Object(10);
assert object.value == 50;

object = Object(5) / 2;
assert object.value == 5 / 2;

object = 5 / Object(2);
assert object.value == 5 / 2;

object = Object(5) // 2;
assert object.value == 5 // 2;

object = 5 // Object(2);
assert object.value == 5 // 2;

object = Object(5) % 2;
assert object.value == 1;

object = 5 % Object(3);
assert object.value == 2;

object = Object(2) ** 3;
assert object.value == 8;

object = 3 ** Object(2);
assert object.value == 9;

# Bitwise operators.
object = Object(0b1010) | 0b0101;
assert object.value == 0b1111;

object = 0b0011 | Object(0b1100);
assert object.value == 0b1111;

object = Object(0b1111) & 0b1010;
assert object.value == 0b1010;

object = 0b0011 & Object(0b1010);
assert object.value == 0b0010;

object = Object(0b1010) ^ 0b1100;
assert object.value == 0b0110;

object = 0b0011 ^ Object(0b0101);
assert object.value == 0b0110;

object = Object(0b101) << 2;
assert object.value == 0b10100;

object = 0b101 << Object(2);
assert object.value == 0b10100;

object = Object(0b1010) >> 2;
assert object.value == 0b10;

object = 0b1010 >> Object(2);
assert object.value == 0b10;

object = ~Object(0);
assert object.value == -1;

object = ~Object(1);
assert object.value == -2;

# Unary arithmetic.
object = -Object(5);
assert object.value == -5;
