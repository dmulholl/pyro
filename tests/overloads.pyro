class Object {
    pub var value;

    def $init(value) {
        self.value = value;
    }

    def $op_binary_equals_equals(other) {
        if $is_instance_of(other, Object) {
            return self.value == other.value;
        }
        return self.value == other;
    }

    def $op_binary_plus(other) {
        return Object(self.value + other);
    }

    def $rop_binary_plus(other) {
        return Object(other + self.value);
    }

    def $op_binary_minus(other) {
        return Object(self.value - other);
    }

    def $rop_binary_minus(other) {
        return Object(other - self.value);
    }

    def $op_binary_star(other) {
        return Object(self.value * other);
    }

    def $rop_binary_star(other) {
        return Object(other * self.value);
    }

    def $op_unary_minus() {
        return Object(-self.value);
    }
}

var object = Object(0);
assert object.value == 0;

# Equality.
assert Object(0) == Object(0);
assert Object(1) == Object(1);
assert Object(0) != Object(1);

assert Object(1) == 1;
assert 1 == Object(1);

assert Object(0) != 1;
assert 1 != Object(0);

# Binary arithmetic.
object = Object(0) + 5;
assert object.value == 5;

object = 5 + Object(0);
assert object.value == 5;

object = Object(0) - 5;
assert object.value == -5;

object = 5 - Object(1);
assert object.value == 4;

object = Object(10) * 5;
assert object.value == 50;

object = 5 * Object(10);
assert object.value == 50;

# Unary arithmetic.
object = -Object(5);
assert object.value == -5;
