import std::constants::{i64_min};

# Floating-point division.
assert 10 / 5 == 2.0;
assert 10 / 5.0 == 2.0;
assert 10.0 / 5 == 2.0;
assert 10.0 / 5.0 == 2.0;

assert 11 / 5 == 2.2;
assert 11 / 5.0 == 2.2;
assert 11.0 / 5 == 2.2;
assert 11.0 / 5.0 == 2.2;

assert $is_err(try (1 / 0));
assert $is_err(try (1 / 0.0));
assert $is_err(try (1.0 / 0));
assert $is_err(try (1.0 / 0.0));

assert !$is_err(try (i64_min / -1));

# Truncated division -- rounds the quotient toward zero.
assert 10 // 5 == 2;
assert 10 // 5.0 == 2.0;
assert 10.0 // 5 == 2.0;
assert 10.0 // 5.0 == 2.0;

assert 11 // 5 == 2;
assert 11 // 5.0 == 2.0;
assert 11.0 // 5 == 2.0;
assert 11.0 // 5.0 == 2.0;

assert $is_err(try (1 // 0));
assert $is_err(try (1 // 0.0));
assert $is_err(try (1.0 // 0));
assert $is_err(try (1.0 // 0.0));

assert $is_err(try (i64_min // -1));

assert -1 // 10 == 0;
assert 1 // -10 == 0;
assert -10 // 3 == -3;
assert 10 // -3 == -3;

assert 5 // 3 == 1;
assert 5 // -3 == -1;
assert -5 // 3 == -1;
assert -5 // -3 == 1;

assert 5.0 // 3.0 == 1.0;
assert 5.0 // -3.0 == -1.0;
assert -5.0 // 3.0 == -1.0;
assert -5.0 // -3.0 == 1.0;

assert 1.25 // 1.0 == 1.0;
assert 1.25 // -1.0 == -1.0;
assert -1.25 // 1.0 == -1.0;
assert -1.25 // -1.0 == 1.0;

# Remainder operator.
assert 0 rem 1 == 0;
assert 1 rem 1 == 0;
assert 2 rem 1 == 0;
assert 3 rem 1 == 0;
assert 4 rem 1 == 0;

assert 0 rem 2 == 0;
assert 1 rem 2 == 1;
assert 2 rem 2 == 0;
assert 3 rem 2 == 1;
assert 4 rem 2 == 0;

assert 0 rem 3 == 0;
assert 1 rem 3 == 1;
assert 2 rem 3 == 2;
assert 3 rem 3 == 0;
assert 4 rem 3 == 1;
assert 5 rem 3 == 2;
assert 6 rem 3 == 0;

assert 2.25 rem 2.0 == 0.25;
assert 2.25 rem 2 == 0.25;
assert 2 rem 0.5 == 0.0;

assert $is_err(try (5 rem 0));

with (numerator, denominator) = (5, 3) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == 1;
    assert remainder == 2;
    assert quotient * denominator + remainder == numerator;
}

with (numerator, denominator) = (5, -3) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == -1;
    assert remainder == 2;
    assert quotient * denominator + remainder == numerator;
}

with (numerator, denominator) = (-5, 3) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == -1;
    assert remainder == -2;
    assert quotient * denominator + remainder == numerator;
}

with (numerator, denominator) = (-5, -3) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == 1;
    assert remainder == -2;
    assert quotient * denominator + remainder == numerator;
}

with (numerator, denominator) = (-1, 10) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == 0;
    assert remainder == -1;
    assert quotient * denominator + remainder == numerator;
}

loop var numerator = -10; numerator <= 10; numerator += 1 {
    loop var denominator = -3; denominator <= 3; denominator += 1 {
        if denominator == 0 {
            continue;
        }

        let quotient = numerator // denominator;
        let remainder = numerator rem denominator;

        assert quotient * denominator + remainder == numerator;
    }
}

assert 5.0 rem 3.0 == 2.0;
assert 5.0 rem -3.0 == 2.0;
assert -5.0 rem 3.0 == -2.0;
assert -5.0 rem -3.0 == -2.0;

assert 1.25 rem 1.0 == 0.25;
assert 1.25 rem -1.0 == 0.25;
assert -1.25 rem 1.0 == -0.25;
assert -1.25 rem -1.0 == -0.25;

with (numerator, denominator) = (1.25, 1.0) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == 1.0;
    assert remainder == 0.25;
    assert quotient * denominator + remainder == numerator;
}

with (numerator, denominator) = (1.25, -1.0) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == -1.0;
    assert remainder == 0.25;
    assert quotient * denominator + remainder == numerator;
}

with (numerator, denominator) = (-1.25, 1.0) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == -1.0;
    assert remainder == -0.25;
    assert quotient * denominator + remainder == numerator;
}

with (numerator, denominator) = (-1.25, -1.0) {
    let quotient = numerator // denominator;
    let remainder = numerator rem denominator;

    assert quotient == 1.0;
    assert remainder == -0.25;
    assert quotient * denominator + remainder == numerator;
}

# Modulo operator.
assert 0 mod 1 == 0;
assert 1 mod 1 == 0;
assert 2 mod 1 == 0;
assert 3 mod 1 == 0;
assert 4 mod 1 == 0;

assert 0 mod 2 == 0;
assert 1 mod 2 == 1;
assert 2 mod 2 == 0;
assert 3 mod 2 == 1;
assert 4 mod 2 == 0;

assert 0 mod 3 == 0;
assert 1 mod 3 == 1;
assert 2 mod 3 == 2;
assert 3 mod 3 == 0;
assert 4 mod 3 == 1;
assert 5 mod 3 == 2;
assert 6 mod 3 == 0;

assert 5 mod 3 == 2;
assert 5 mod -3 == -1;
assert -5 mod 3 == 1;
assert -5 mod -3 == -2;

assert -1 mod 10 == 9;

assert $is_err(try (5 mod 0));
assert $is_err(try (5.0 mod 1));
assert $is_err(try (5 mod 1.0));
