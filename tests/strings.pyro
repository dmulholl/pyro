var foo = "foo";
assert foo == "foo";
assert "foo" == foo;
assert "foo" == "foo";
assert foo:byte_count() == 3;
assert foo:count() == 3;
assert foo:byte(0) == 102;
assert foo:byte(1) == 111;
assert foo:byte(2) == 111;

assert "":is_empty() == true;
assert "foo":is_empty() == false;

assert "\n":byte_count() == 1;
assert "\n":byte(0) == 10;

assert "\r":byte_count() == 1;
assert "\r":byte(0) == 13;

assert "\\":byte_count() == 1;
assert "\\":byte(0) == 92;

assert "\"":byte_count() == 1;
assert "\"":byte(0) == 34;

assert "\e":byte_count() == 1;
assert "\e":byte(0) == 27;

assert "\x21" == "!";
assert "\x21":byte_count() == 1;
assert "\x21":byte(0) == 33;

assert "\u0021" == "!";
assert "\u0021":byte_count() == 1;
assert "\u0021":byte(0) == 33;

assert "\u20ac" == "€";
assert "\u20ac":byte_count() == 3;
assert "\u20ac":byte(0) == 226;
assert "\u20ac":byte(1) == 130;
assert "\u20ac":byte(2) == 172;

assert "\U000020ac" == "€";
assert "\U000020ac":byte_count() == 3;
assert "\U000020ac":byte(0) == 226;
assert "\U000020ac":byte(1) == 130;
assert "\U000020ac":byte(2) == 172;

var bar = `bar`;
assert bar == `bar`;
assert bar == "bar";
assert `bar` == "bar";
assert bar:byte_count() == 3;
assert bar:byte(0) == 98;
assert bar:byte(1) == 97;
assert bar:byte(2) == 114;

assert `\`:byte_count() == 1;
assert `\`:byte(0) == 92;

assert `\n`:byte_count() == 2;
assert `\x21`:byte_count() == 4;
assert `\u1234`:byte_count() == 6;

assert $is_str("foo");
assert !$is_str(123);

assert $str("foo") == "foo";
assert $str(123) == "123";
assert $str(123.456) == "123.456";

var sum = 0;
for byte in "abc":bytes() {
    sum += byte;
}
assert sum == 97 + 98 + 99;

assert "foo BAR 123":to_ascii_upper() == "FOO BAR 123";
assert "foo BAR 123":to_ascii_lower() == "foo bar 123";

assert "foo BAR 123":to_upper() == "FOO BAR 123";
assert "foo BAR 123":to_lower() == "foo bar 123";

def $test_starts_with() {
    var str = "foobar";
    assert str:starts_with("f");
    assert str:starts_with("foo");
    assert str:starts_with("foobar");
    assert !str:starts_with("bar");
    assert !str:starts_with("foobarbaz");
}


def $test_ends_with() {
    var str = "foobar";
    assert str:ends_with("r");
    assert str:ends_with("bar");
    assert str:ends_with("foobar");
    assert !str:ends_with("foo");
    assert !str:ends_with("foobarbaz");
}


def $test_strip_prefix() {
    var str = "foobar";
    assert str:strip_prefix("foo") == "bar";
    assert str:strip_prefix("foobar") == "";
    assert str:strip_prefix("bar") == "foobar";
    assert str:strip_prefix("xxx") == "foobar";
    assert str:strip_prefix("") == "foobar";

    assert "":strip_prefix("xxx") == "";
}


def $test_strip_suffix() {
    var str = "foobar";
    assert str:strip_suffix("foo") == "foobar";
    assert str:strip_suffix("foobar") == "";
    assert str:strip_suffix("bar") == "foo";
    assert str:strip_suffix("xxx") == "foobar";
    assert str:strip_suffix("") == "foobar";

    assert "":strip_suffix("xxx") == "";
}


def $test_strip_prefix_bytes() {
    var str = "foobar";
    assert str:strip_prefix_bytes("f") == "oobar";
    assert str:strip_prefix_bytes("fo") == "bar";
    assert str:strip_prefix_bytes("of") == "bar";
    assert str:strip_prefix_bytes("fobar") == "";
    assert str:strip_prefix_bytes("o") == "foobar";
    assert str:strip_prefix_bytes("x") == "foobar";

    assert "":strip_prefix_bytes("abc") == "";
}


def $test_strip_suffix_bytes() {
    var str = "foobar";
    assert str:strip_suffix_bytes("r") == "fooba";
    assert str:strip_suffix_bytes("ar") == "foob";
    assert str:strip_suffix_bytes("ra") == "foob";
    assert str:strip_suffix_bytes("fobar") == "";
    assert str:strip_suffix_bytes("a") == "foobar";
    assert str:strip_suffix_bytes("x") == "foobar";

    assert "":strip_suffix_bytes("abc") == "";
}


def $test_strip_bytes() {
    var str = "foobar";
    assert str:strip_bytes("") == "foobar";
    assert str:strip_bytes("fr") == "ooba";
    assert str:strip_bytes("fobar") == "";
    assert str:strip_bytes("x") == "foobar";
    assert str:strip_bytes("oa") == "foobar";

    assert "":strip_bytes("abc") == "";
}


def $test_strip_ascii_ws() {
    assert "   \tfoobar\r\n   ":strip_ascii_ws() == "foobar";
    assert "foobar":strip_ascii_ws() == "foobar";
    assert "":strip_ascii_ws() == "";
}


def $test_match() {
    var str = "foobar";

    assert str:match("foobar", 0);
    assert str:match("foo", 0);
    assert str:match("oob", 1);
    assert str:match("bar", 3);

    assert !str:match("fooX", 0);
    assert !str:match("Xfoo", 0);

    assert !"":match("xxx", 0);
}


def $test_replace() {
    var str = "foo and foo and foo";
    assert str:replace("foo", "bar") == "bar and bar and bar";
    assert str:replace("foo", "foobar") == "foobar and foobar and foobar";
    assert str:replace("foo", "") == " and  and ";
    assert str:replace("", "bar") == "foo and foo and foo";
    assert str:replace("xxx", "bar") == "foo and foo and foo";
}


def $test_slice() {
    var str = "foobar";

    assert str:slice(0, 0) == "";
    assert str:slice(0, 3) == "foo";
    assert str:slice(3, 3) == "bar";
    assert str:slice(6, 0) == "";
    assert str:slice(0, str:byte_count()) == "foobar";

    assert $is_err(try str:slice(0, 7));
    assert $is_err(try str:slice(3, 7));
    assert $is_err(try str:slice(6, 1));
    assert $is_err(try "":slice(0, 1));
}


def $test_slice_with_negative_start_index() {
    var str = "foobar";

    assert str:slice(-1, 1) == "r";
    assert str:slice(-2, 2) == "ar";

    assert $is_err(try str:slice(-1, 2));
    assert $is_err(try "":slice(-1, 1));
}


def $test_slice_with_missing_length() {
    var str = "foobar";

    assert str:slice(0) == "foobar";
    assert str:slice(3) == "bar";
    assert str:slice(6) == "";

    assert str:slice(-1) == "r";
    assert str:slice(-3) == "bar";

    assert $is_err(try str:slice(7));
    assert $is_err(try "":slice(-1));
}


def $test_index_of() {
    var str = "foobar";

    assert str:index_of("foo", 0) == 0;
    assert str:index_of("bar", 0) == 3;
    assert str:index_of("bar", 1) == 3;
    assert str:index_of("bar", 3) == 3;
    assert str:index_of("foobar", 0) == 0;

    assert str:index_of("", 0) == 0; # str:slice(0, 0) == ""
    assert str:index_of("", 3) == 3; # str:slice(3, 0) == ""

    assert $is_err(str:index_of("xxx", 0));
    assert $is_err(str:index_of("foo", 1));

    assert str:index_of("foo") == 0;
    assert str:index_of("bar") == 3;
}


def $test_contains_substring() {
    var str = "foobar";
    assert str:contains("foobar");
    assert str:contains("foo");
    assert str:contains("bar");
    assert !str:contains("xxx");
    assert !str:contains("foobarfoobar");
    assert !"":contains("xxx");

    # Following Python's reasoning that the empty string is a valid substring of every string.
    assert "foobar":contains("");
    assert "":contains("");
}


def $test_contains_rune() {
    assert !"":contains('a');
    assert !"foo":contains('a');
    assert "foo":contains('o');
    assert "foo🔥bar":contains('a');
    assert "foo🔥bar":contains('🔥');
}


def $test_in() {
    assert "foo" in "foobar";
    assert "oba" in "foobar";
    assert !("foo" in "moobar");

    assert 'o' in "foobar";
    assert '🔥' in "foo🔥bar";
}


def $test_split() {
    var v1 = "":split("--");
    assert v1:count() == 1;
    assert v1[0] == "";

    var v2 = "--":split("--");
    assert v2:count() == 2;
    assert v2[0] == "";
    assert v2[1] == "";

    var v3 = "----":split("--");
    assert v3:count() == 3;
    assert v3[0] == "";
    assert v3[1] == "";
    assert v3[2] == "";

    var v4 = "a":split("--");
    assert v4:count() == 1;
    assert v4[0] == "a";

    var v5 = "abc":split("--");
    assert v5:count() == 1;
    assert v5[0] == "abc";

    var v6 = "abc--de":split("--");
    assert v6:count() == 2;
    assert v6[0] == "abc";
    assert v6[1] == "de";

    var v7 = "abc--de--f":split("--");
    assert v7:count() == 3;
    assert v7[0] == "abc";
    assert v7[1] == "de";
    assert v7[2] == "f";

    var v8 = "--abc--de--f--":split("--");
    assert v8:count() == 5;
    assert v8[0] == "";
    assert v8[1] == "abc";
    assert v8[2] == "de";
    assert v8[3] == "f";
    assert v8[4] == "";

    var v9 = "abc":split("");
    assert v9:count() == 1;
    assert v9[0] == "abc";

    var v10 = "foo bar":split();
    assert v10:count() == 2;
    assert v10[0] == "foo";
    assert v10[1] == "bar";

    var v11 = "  foo  bar  ":split();
    assert v11:count() == 2;
    assert v11[0] == "foo";
    assert v11[1] == "bar";
}


def $test_split_on_ascii_ws() {
    var vec1 = "":split_on_ascii_ws();
    assert vec1:count() == 1;
    assert vec1[0] == "";

    var vec2 = "    ":split_on_ascii_ws();
    assert vec2:count() == 1;
    assert vec2[0] == "";

    var vec3 = "foo":split_on_ascii_ws();
    assert vec3:count() == 1;
    assert vec3[0] == "foo";

    var vec4 = "  foo  ":split_on_ascii_ws();
    assert vec4:count() == 1;
    assert vec4[0] == "foo";

    var vec5 = "   foo \t\n bar baz   ":split_on_ascii_ws();
    assert vec5:count() == 3;
    assert vec5[0] == "foo";
    assert vec5[1] == "bar";
    assert vec5[2] == "baz";
}


def $test_to_hex() {
    assert `foo`:to_hex() == `\x66\x6F\x6F`;
}


def $test_strip() {
    assert "":strip() == "";
    assert "foo":strip() == "foo";
    assert "  \tfoo  \t\r\n":strip() == "foo";
    assert "abccbafooabccab":strip("abc") == "foo";
}


def $test_strip_utf8_ws() {
    assert "":strip_utf8_ws() == "";
    assert "foo":strip_utf8_ws() == "foo";
    assert " \u0020\u0085\u00A0\u1680 foo \u0020\u0085\u00A0\u1680 ":strip_utf8_ws() == "foo";
    assert "\n\t foo \t\n":strip_utf8_ws() == "foo";
}


def $test_strip_runes() {
    assert "":strip_runes("a§b€c👍") == "";
    assert "foobar":strip_runes("a§b€c👍") == "foobar";
    assert "b§a€c👍foobar§b€c👍a":strip_runes("a§b€c👍") == "foobar";
}


def $test_strip_prefix_runes() {
    assert "":strip_prefix_runes("a§b€c👍") == "";
    assert "foobar":strip_prefix_runes("a§b€c👍") == "foobar";
    assert "b§a€c👍foobar§b€c👍a":strip_prefix_runes("a§b€c👍") == "foobar§b€c👍a";
}


def $test_strip_suffix_runes() {
    assert "":strip_suffix_runes("a§b€c👍") == "";
    assert "foobar":strip_suffix_runes("a§b€c👍") == "foobar";
    assert "b§a€c👍foobar§b€c👍a":strip_suffix_runes("a§b€c👍") == "b§a€c👍foobar";
}


def $test_multiplication_by_int() {
    assert "" * 0 == "";
    assert "" * 3 == "";
    assert "foo" * 0 == "";
    assert "foo" * 3 == "foofoofoo";
}


def $test_iterating_over_string_directly() {
    var result = "";
    for char in "abc" {
        assert $is_str(char);
        result += char;
    }
    assert result == "abc";

    var chars = "abc":iter():to_vec();
    assert chars:count() == 3;
    assert chars[0] == "a";
    assert chars[1] == "b";
    assert chars[2] == "c";
}


def $test_iterating_over_bytes() {
    var bytes = "abc":bytes():to_vec();
    assert bytes:count() == 3;
    assert bytes[0] == 97;
    assert bytes[1] == 98;
    assert bytes[2] == 99;
}


def $test_iterating_over_runes() {
    var runes = "abc🔥€":runes():to_vec();
    assert runes:count() == 5;
    assert runes[0] == 'a';
    assert runes[1] == 'b';
    assert runes[2] == 'c';
    assert runes[3] == '🔥';
    assert runes[4] == '€';
}


def $test_join() {
    assert ", ":join(["foo", "bar", "baz"]) == "foo, bar, baz";
    assert "":join(["foo", "bar", "baz"]) == "foobarbaz";
    assert ", ":join(["foo"]) == "foo";
    assert ", ":join([]) == "";
}


def $test_iterating_over_lines() {
    assert "":lines():count() == 0;

    assert "\n":lines():count() == 1;
    assert "\n":lines():to_vec()[0] == "";

    assert "foo":lines():count() == 1;
    assert "foo":lines():to_vec()[0] == "foo";

    assert "foo\n":lines():count() == 1;
    assert "foo\n":lines():to_vec()[0] == "foo";

    assert "foo\nbar":lines():count() == 2;
    assert "foo\nbar":lines():to_vec()[0] == "foo";
    assert "foo\nbar":lines():to_vec()[1] == "bar";

    assert "foo\nbar\n":lines():count() == 2;
    assert "foo\nbar\n":lines():to_vec()[0] == "foo";
    assert "foo\nbar\n":lines():to_vec()[1] == "bar";

    assert "\n\n":lines():count() == 2;
    assert "\n\n":lines():to_vec()[0] == "";
    assert "\n\n":lines():to_vec()[1] == "";

    assert "foo\n\nbar":lines():count() == 3;
    assert "foo\n\nbar":lines():to_vec()[0] == "foo";
    assert "foo\n\nbar":lines():to_vec()[1] == "";
    assert "foo\n\nbar":lines():to_vec()[2] == "bar";
}


def $test_indexing_into_string() {
    assert "abc"[0] == "a";
    assert "abc"[1] == "b";
    assert "abc"[2] == "c";
    assert $is_err(try "abc"[3]);
}


def $test_is_ascii_ws() {
    assert " ":is_ascii_ws();
    assert " \t\r\n ":is_ascii_ws();

    assert !"":is_ascii_ws();
    assert !"a":is_ascii_ws();
    assert !"abc":is_ascii_ws();
    assert !"abc def":is_ascii_ws();
}


def $test_is_ws() {
    assert " ":is_ws();
    assert " \t\r\n ":is_ws();

    assert !"":is_ws();
    assert !"a":is_ws();
    assert !"abc":is_ws();
    assert !"abc def":is_ws();
}


def $test_is_utf8_ws() {
    assert " ":is_utf8_ws();
    assert " \t\r\n ":is_utf8_ws();

    assert !"":is_utf8_ws();
    assert !"a":is_utf8_ws();
    assert !"abc":is_utf8_ws();
    assert !"abc def":is_utf8_ws();

    assert " \u0020\u0085\u00A0\u1680 ":is_utf8_ws();
    assert !"🔥":is_utf8_ws();
}


def $test_is_ascii_octal() {
    assert "0":is_ascii_octal();
    assert "000":is_ascii_octal();
    assert "123":is_ascii_octal();
    assert "777":is_ascii_octal();
    assert "01234567":is_ascii_octal();

    assert !"":is_ascii_octal();
    assert !" ":is_ascii_octal();
    assert !"8":is_ascii_octal();
    assert !"789":is_ascii_octal();
    assert !"abc":is_ascii_octal();
}


def $test_is_ascii_decimal() {
    assert "0":is_ascii_decimal();
    assert "000":is_ascii_decimal();
    assert "123":is_ascii_decimal();
    assert "456":is_ascii_decimal();
    assert "999":is_ascii_decimal();
    assert "123456789":is_ascii_decimal();

    assert !"":is_ascii_decimal();
    assert !" ":is_ascii_decimal();
    assert !"abc":is_ascii_decimal();
    assert !"123abc":is_ascii_decimal();
}


def $test_is_ascii_hex() {
    assert "0":is_ascii_hex();
    assert "000":is_ascii_hex();
    assert "123":is_ascii_hex();
    assert "456":is_ascii_hex();
    assert "999":is_ascii_hex();
    assert "123456789abcdefABCDEF":is_ascii_hex();

    assert !"":is_ascii_hex();
    assert !" ":is_ascii_hex();
    assert !"ghi":is_ascii_hex();
    assert !"123ghi":is_ascii_hex();
}


def $test_is_ascii() {
    assert " ":is_ascii();
    assert "abc":is_ascii();

    assert !"":is_ascii();
    assert !"a\xFFb":is_ascii();
    assert !"a§b€c👍d":is_ascii();
}


def $test_is_utf8() {
    assert " ":is_utf8();
    assert "abc":is_utf8();
    assert "a§b€c👍d":is_utf8();

    assert !"":is_utf8();
    assert !"a\x80b":is_utf8();
}


def $test_concatenating_strings() {
    assert "" + "" == "";
    assert "foo" + "bar" == "foobar";
    assert "" + "foo" == "foo";
    assert "foo" + "" == "foo";
    assert $is_err(try ("foo" + 123));
    assert $is_err(try (123 + "foo"));
}
