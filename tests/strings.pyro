var foo = "foo";
assert foo == "foo";
assert "foo" == foo;
assert "foo" == "foo";
assert foo:byte_count() == 3;
assert foo:byte(0) == 102;
assert foo:byte(1) == 111;
assert foo:byte(2) == 111;

assert "\n":byte_count() == 1;
assert "\n":byte(0) == 10;

assert "\\":byte_count() == 1;
assert "\\":byte(0) == 92;

assert "\"":byte_count() == 1;
assert "\"":byte(0) == 34;

assert "\x21" == "!";
assert "\x21":byte_count() == 1;
assert "\x21":byte(0) == 33;

assert "\u0021" == "!";
assert "\u0021":byte_count() == 1;
assert "\u0021":byte(0) == 33;

assert "\u20ac" == "€";
assert "\u20ac":byte_count() == 3;
assert "\u20ac":byte(0) == 226;
assert "\u20ac":byte(1) == 130;
assert "\u20ac":byte(2) == 172;

assert "\U000020ac" == "€";
assert "\U000020ac":byte_count() == 3;
assert "\U000020ac":byte(0) == 226;
assert "\U000020ac":byte(1) == 130;
assert "\U000020ac":byte(2) == 172;

var bar = `bar`;
assert bar == `bar`;
assert bar == "bar";
assert `bar` == "bar";
assert bar:byte_count() == 3;
assert bar:byte(0) == 98;
assert bar:byte(1) == 97;
assert bar:byte(2) == 114;

assert `\`:byte_count() == 1;
assert `\`:byte(0) == 92;

assert `\n`:byte_count() == 2;
assert `\x21`:byte_count() == 4;
assert `\u1234`:byte_count() == 6;

assert $is_str("foo");
assert !$is_str(123);

assert $str("foo") == "foo";
assert $str(123) == "123";
assert $str(123.456) == "123.456";

var sum = 0;
for byte in "abc":bytes() {
    sum += byte;
}
assert sum == 97 + 98 + 99;

assert "":is_ascii();
assert "abc":is_ascii();
assert !"a\xFFb":is_ascii();
assert !"a§b€c👍d":is_ascii();

assert "":is_utf8();
assert "abc":is_utf8();
assert "a§b€c👍d":is_utf8();
assert !"a\x80b":is_utf8();

assert "foo BAR 123":to_ascii_upper() == "FOO BAR 123";
assert "foo BAR 123":to_ascii_lower() == "foo bar 123";


def $test_starts_with() {
    var str = "foobar";
    assert str:starts_with("f");
    assert str:starts_with("foo");
    assert str:starts_with("foobar");
    assert !str:starts_with("bar");
    assert !str:starts_with("foobarbaz");
}


def $test_ends_with() {
    var str = "foobar";
    assert str:ends_with("r");
    assert str:ends_with("bar");
    assert str:ends_with("foobar");
    assert !str:ends_with("foo");
    assert !str:ends_with("foobarbaz");
}


def $test_strip_prefix() {
    var str = "foobar";
    assert str:strip_prefix("foo") == "bar";
    assert str:strip_prefix("foobar") == "";
    assert str:strip_prefix("bar") == "foobar";
    assert str:strip_prefix("xxx") == "foobar";
    assert str:strip_prefix("") == "foobar";

    assert "":strip_prefix("xxx") == "";
}


def $test_strip_suffix() {
    var str = "foobar";
    assert str:strip_suffix("foo") == "foobar";
    assert str:strip_suffix("foobar") == "";
    assert str:strip_suffix("bar") == "foo";
    assert str:strip_suffix("xxx") == "foobar";
    assert str:strip_suffix("") == "foobar";

    assert "":strip_suffix("xxx") == "";
}


def $test_strip_prefix_bytes() {
    var str = "foobar";
    assert str:strip_prefix_bytes("f") == "oobar";
    assert str:strip_prefix_bytes("fo") == "bar";
    assert str:strip_prefix_bytes("of") == "bar";
    assert str:strip_prefix_bytes("fobar") == "";
    assert str:strip_prefix_bytes("o") == "foobar";
    assert str:strip_prefix_bytes("x") == "foobar";

    assert "":strip_prefix_bytes("abc") == "";
}


def $test_strip_suffix_bytes() {
    var str = "foobar";
    assert str:strip_suffix_bytes("r") == "fooba";
    assert str:strip_suffix_bytes("ar") == "foob";
    assert str:strip_suffix_bytes("ra") == "foob";
    assert str:strip_suffix_bytes("fobar") == "";
    assert str:strip_suffix_bytes("a") == "foobar";
    assert str:strip_suffix_bytes("x") == "foobar";

    assert "":strip_suffix_bytes("abc") == "";
}


def $test_strip_bytes() {
    var str = "foobar";
    assert str:strip_bytes("") == "foobar";
    assert str:strip_bytes("fr") == "ooba";
    assert str:strip_bytes("fobar") == "";
    assert str:strip_bytes("x") == "foobar";
    assert str:strip_bytes("oa") == "foobar";

    assert "":strip_bytes("abc") == "";
}


def $test_strip_ascii_ws() {
    assert "   \tfoobar\r\n   ":strip_ascii_ws() == "foobar";
    assert "foobar":strip_ascii_ws() == "foobar";
    assert "":strip_ascii_ws() == "";
}


def $test_match() {
    var str = "foobar";

    assert str:match("foobar", 0);
    assert str:match("foo", 0);
    assert str:match("oob", 1);
    assert str:match("bar", 3);

    assert !str:match("fooX", 0);
    assert !str:match("Xfoo", 0);

    assert !"":match("xxx", 0);
}


def $test_replace() {
    var str = "foo and foo and foo";
    assert str:replace("foo", "bar") == "bar and bar and bar";
    assert str:replace("foo", "foobar") == "foobar and foobar and foobar";
    assert str:replace("foo", "") == " and  and ";
    assert str:replace("", "bar") == "foo and foo and foo";
    assert str:replace("xxx", "bar") == "foo and foo and foo";
}


def $test_substr() {
    var str = "foobar";
    assert str:substr(0, 0) == "";
    assert str:substr(0, 3) == "foo";
    assert str:substr(3, 3) == "bar";
    assert str:substr(0, str:byte_count()) == "foobar";
}


def $test_index_of() {
    var str = "foobar";
    assert str:index_of("foo", 0) == 0;
    assert str:index_of("bar", 0) == 3;
    assert str:index_of("bar", 1) == 3;
    assert str:index_of("bar", 3) == 3;
    assert str:index_of("foobar", 0) == 0;

    assert $is_err(str:index_of("xxx", 0));
    assert $is_err(str:index_of("foo", 1));
}


def $test_contains() {
    var str = "foobar";
    assert str:contains("foobar");
    assert str:contains("foo");
    assert str:contains("bar");
    assert !str:contains("xxx");
    assert !str:contains("foobarfoobar");
    assert !"":contains("xxx");
}


def $test_split() {
    var vec1 = "abc--de--f":split("--");
    assert vec1:count() == 3;
    assert vec1[0] == "abc";
    assert vec1[1] == "de";
    assert vec1[2] == "f";

    var vec2 = "--abc--de--f--":split("--");
    assert vec2:count() == 5;
    assert vec2[0] == "";
    assert vec2[1] == "abc";
    assert vec2[2] == "de";
    assert vec2[3] == "f";
    assert vec2[4] == "";

    var vec3 = "--":split("--");
    assert vec3:count() == 2;
    assert vec3[0] == "";
    assert vec3[1] == "";

    var vec4 = "abc":split("--");
    assert vec4:count() == 1;
    assert vec4[0] == "abc";

    var vec5 = "x":split("--");
    assert vec5:count() == 1;
    assert vec5[0] == "x";

    var vec6 = "":split("--");
    assert vec6:count() == 1;
    assert vec6[0] == "";

    var vec7 = "abc":split("");
    assert vec7:count() == 1;
    assert vec7[0] == "abc";

    var vec8 = "abc,,def":split(",");
    assert vec8:count() == 3;
    assert vec8[0] == "abc";
    assert vec8[1] == "";
    assert vec8[2] == "def";
}
