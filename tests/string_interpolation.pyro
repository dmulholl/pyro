var foo = "foo";
var bar = "bar";
var int = 123;
var float = 1.23456;
var char = 'z';

class Object {
    pub var field = 123;

    pub def method() {
        return 456;
    }

    def $str() {
        return "OBJECT";
    }

    def $debug() {
        return "DEBUG";
    }

    def $fmt(format_specifier) {
        return "<" + format_specifier + ">";
    }
}

assert "" == ``;

assert "\${" == `${`;
assert "abc \${ def" == `abc ${ def`;
assert "abc \${} def" == `abc ${} def`;
assert "abc \${foo} def" == `abc ${foo} def`;
assert "abc \${foo}\${bar} def" == `abc ${foo}${bar} def`;

assert "${foo}" == "foo";
assert "abc ${foo}" == "abc foo";
assert "${foo} def" == "foo def";
assert "abc ${foo} def" == "abc foo def";

assert "${foo}${bar}" == "foobar";
assert "abc ${foo}${bar}" == "abc foobar";
assert "${foo}${bar} def" == "foobar def";
assert "abc ${foo}${bar} def" == "abc foobar def";
assert "abc ${foo} def ${bar} zzz" == "abc foo def bar zzz";

assert "\x61\x62\x63 ${foo} \x78\x79\x7A" == `abc foo xyz`;

assert "${int}" == "123";
assert "abc ${int} def" == "abc 123 def";
assert "${float}" == "1.23456";
assert "abc ${float} def" == "abc 1.23456 def";
assert "${char}" == `z`;
assert "abc ${char} def" == `abc z def`;
assert "abc ${int} def ${float} ghi ${char} jkl" == "abc 123 def 1.23456 ghi z jkl";

assert "${1 + 2}" == "3";
assert "abc ${1 + 2} def" == "abc 3 def";
assert "${int + 1}" == "124";
assert "${float + 1}" == "2.23456";

var obj = Object();
assert "${obj.field}" == "123";
assert "${obj.field + 1}" == "124";
assert "${obj:method()}" == "456";
assert "${obj:method() + 1}" == "457";
assert "${obj}" == `OBJECT`;
assert "${obj;xyz}" == `<xyz>`;
assert "${obj;?}" == `DEBUG`;
assert "${obj;??}" == `Object`;

assert "${Object().field}" == "123";
assert "${Object().field + 1}" == "124";
assert "${Object():method()}" == "456";
assert "${Object():method() + 1}" == "457";
assert "${Object()}" == `OBJECT`;
assert "${Object();xyz}" == `<xyz>`;
assert "${Object();?}" == `DEBUG`;
assert "${Object();??}" == `Object`;

var source_code_1 = `${}`;
assert $is_err(try $exec(source_code_1));

var source_code_2 = `${`;
assert $is_err(try $exec(source_code_2));

assert "${'a'}" == `a`;
assert "${$str('a')}" == `a`;
assert "${$str('a'):to_ascii_upper()}" == `A`;

assert "${`foo bar`}" == `foo bar`;
assert "${`foo bar`:to_ascii_upper()}" == `FOO BAR`;

assert "${"foo bar"}" == `foo bar`;
assert "${"foo bar":to_ascii_upper()}" == `FOO BAR`;

assert "${`${foo}`}" == `${foo}`;
assert "${`${foo}`:to_ascii_upper()}" == `${FOO}`;

assert "${"${foo}"}" == `foo`;
assert "${"${foo:to_ascii_upper()}"}" == `FOO`;
assert "${"xxx ${foo} yyy"}" == `xxx foo yyy`;

assert "${"${"xyz"}"}" == `xyz`;
assert "${"${"xyz":to_ascii_upper()}"}" == `XYZ`;

assert "${"a ${"b ${"c"} d"} e"}" == `a b c d e`;
assert "${"a ${"b ${"c":to_ascii_upper()} d"} e"}" == `a b C d e`;

{
    var local = "foobar";
    assert "${local}" == "foobar";
}

var vec = [];
for i in $range(10) {
    var string = "${i}";
    assert string == $str(i);
    vec:append(string);
}
assert vec[0] == `0`;
assert vec[1] == `1`;
assert vec[8] == `8`;
assert vec[9] == `9`;

def $test_interpolation_in_function() {
    var func_local = "foobar";
    assert "${func_local}" == "foobar";
}

# Try formatting an i64 with an invalid specifier.
assert $is_err(try "${int;!!!}");

# Format i64 as decimal.
assert "${int;d}" == `123`;
assert "${int;4d}" == ` 123`;
assert "${int;04d}" == `0123`;

# Format i64 as octal.
assert "${int;o}" == `173`;
assert "${int;4o}" == ` 173`;
assert "${int;04o}" == `0173`;

# Format i64 as lowercase hex.
assert "${int;x}" == `7b`;
assert "${int;4x}" == `  7b`;
assert "${int;04x}" == `007b`;

# Format i64 as uppercase hex.
assert "${int;X}" == `7B`;
assert "${int;4X}" == `  7B`;
assert "${int;04X}" == `007B`;

# Try formatting an f64 with an invalid specifier.
assert $is_err(try "${float;!!!}");

# Format f64.
assert "${float;.2f}" == `1.23`;
assert "${float;5.2f}" == ` 1.23`;
assert "${float;05.2f}" == `01.23`;

# Try formatting a char with an invalid specifier.
assert $is_err(try "${char;!!!}");

# Try formatting a char as an integer.
assert "${char;d}" == `122`;
assert "${char;o}" == `172`;
assert "${char;x}" == `7a`;
assert "${char;X}" == `7A`;
assert "${char;04d}" == `0122`;
assert "${char;04o}" == `0172`;
assert "${char;04x}" == `007a`;
assert "${char;04X}" == `007A`;

# Try formatting a string with an invalid specifier.
assert $is_err(try "${foo;!!!}");

# Format a string.
assert "${foo;5}" == `  foo`;
assert "${foo;-5}" == `foo  `;

# Test the debug format specifier.
assert "${foo;?}" == `"foo"`;

# Test the type format specifier.
assert "${foo;??}" == `str`;

# Test nested format specifiers.
assert "${"${int;05d}";7}" == `  00123`;
assert "abc|${"${int;05d}";7}|def" == `abc|  00123|def`;
assert "abc|${"def-${int;05d}-ghi";15}|jkl" == `abc|  def-00123-ghi|jkl`;
