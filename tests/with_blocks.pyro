# Test with-variable as local.
with foo = 123 {
    assert foo == 123;
    assert foo + 1 == 124;
}

# Simple happy path.
var global = 0;

class Object {
    def $end_with() {
        global += 1;
    }
}

with obj = Object() {
    assert global == 0;
}

assert global == 1;

with obj1 = Object() {
    assert global == 1;
    with obj2 = Object() {
        assert global == 1;
    }
    assert global == 2;
}

assert global == 3;

def func() {
    with obj = Object() {
        assert global == 3;
    }
    return "func";
}

assert func() == "func";
assert global == 4;

# Early returns.
global = 0;

def f1() {
    with obj = Object() {
        return "f1";
    }
}

assert f1() == "f1";
assert global == 1;

def f2() {
    with obj = Object() {
        with obj = Object() {
            return "f2";
        }
    }
}

assert f2() == "f2";
assert global == 3;

def f3() {
    with obj = Object() {
        return f2();
    }
}

assert f3() == "f2";
assert global == 6;
