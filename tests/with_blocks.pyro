# Variable scoping 1: no shadowing.
with foo = 123 {
    assert foo == 123;
    foo += 1;
    assert foo == 124;
}
assert $is_err(try (foo += 1));

# Variable scoping 2: shadowing a global.
var bar = 123;
assert bar == 123;

with bar = 456 {
    assert bar == 456;
    bar += 1;
    assert bar == 457;
}

assert bar == 123;

# Variable scoping 3: shadowing a local.
{
    var baz = 123;
    assert baz == 123;

    with baz = 456 {
        assert baz == 456;
        baz += 1;
        assert baz == 457;
    }

    assert baz == 123;
}
assert $is_err(try(baz += 1));

# Simple happy path -- no panics or early returns.
var global = 0;

class Object {
    def $end_with() {
        global += 1;
    }
}

with obj = Object() {
    assert global == 0;
}

assert global == 1;

with obj1 = Object() {
    assert global == 1;
    with obj2 = Object() {
        assert global == 1;
    }
    assert global == 2;
}

assert global == 3;

def func() {
    with obj = Object() {
        assert global == 3;
    }
    return "func";
}

assert func() == "func";
assert global == 4;

# Early returns.
global = 0;

def f1() {
    with obj = Object() {
        return "f1";
    }
}

assert f1() == "f1";
assert global == 1;

def f2() {
    with obj = Object() {
        with obj = Object() {
            return "f2";
        }
    }
}

assert f2() == "f2";
assert global == 3;

def f3() {
    with obj = Object() {
        return f2();
    }
}

assert f3() == "f2";
assert global == 6;

# Panics.
global = 0;

with obj = Object() {
    assert $is_err(try $panic("oh no!"));
}

assert global == 1;

def f4() {
    with obj = Object() {
        $panic("on no!");
    }
}

assert $is_err(try f4());
assert global == 2;

def f5() {
    with obj = Object() {
        f4();
    }
}

assert $is_err(try f5());
assert global == 4;

def f6() {
    with obj = Object() {
        with obj = Object() {
            f4();
        }
    }
}

assert $is_err(try f6());
assert global == 7;

def f7() {
    assert $is_err(try f6());
    return "f7";
}

assert f7() == "f7";
assert global == 10;
