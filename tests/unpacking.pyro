# Test unpacking into globals.
var (foo, bar, baz) = $tup(123, 456, 789);
assert foo == 123;
assert bar == 456;
assert baz == 789;


# Test unpacking into globals with discarding.
var (_, bam, _) = $tup(123, 456, 789);
assert bam == 456;


# Test unpacking into locals.
{
    var (foo, bar, baz) = $tup(1, 2, 3);
    assert foo == 1;
    assert bar == 2;
    assert baz == 3;
}


# Test unpacking into locals with discarding.
{
    var (_, bam, _) = $tup(1, 2, 3);
    assert bam == 2;
}


def $test_unpacking_a_univalue_tuple() {
    var (foo) = $tup(123);
    assert foo == 123;
}


def $test_unpacking_the_first_value_of_a_tuple() {
    var (foo) = $tup(123, 456);
    assert foo == 123;
}


def $test_partially_unpacking_a_tuple() {
    var (foo, bar) = $tup(123, 456, 789);
    assert foo == 123;
    assert bar == 456;
}


def $test_unpacking_a_vector() {
    var (foo, bar, baz) = [123, 456, 789];
    assert foo == 123;
    assert bar == 456;
    assert baz == 789;
}


def $test_partially_unpacking_a_vector() {
    var (foo, bar) = [123, 456, 789];
    assert foo == 123;
    assert bar == 456;
}


def $test_unpacking_a_vector_with_discarding() {
    var (_, bar, _) = [123, 456, 789];
    assert bar == 456;
}


def $test_unpacking_a_var_declaration_with_commas() {
    var (foo, bar) = $tup(123, 456), baz = 789;
    assert foo == 123;
    assert bar == 456;
    assert baz == 789;
}
