assert !$is_buf("foo");

var foo = $buf();
assert $is_buf(foo);
assert foo:count() == 0;
assert foo:is_empty();

foo:write_byte(0x61);
assert foo:count() == 1;
assert !foo:is_empty();

foo:write_byte(0x62);
assert foo:count() == 2;

foo:write_byte(0x63);
assert foo:count() == 3;

var string = foo:to_str();
assert string == "abc";
assert foo:count() == 0;

foo:write_byte(0x64);
assert foo:count() == 1;
assert foo:get(0) == 0x64;
assert foo:byte(0) == 0x64;

foo:set(0, 0x65);
assert foo:count() == 1;
assert foo:get(0) == 0x65;
assert foo:byte(0) == 0x65;

assert foo[0] == 0x65;
foo[0] = 0x66;
assert foo[0] == 0x66;


def $test_write_with_single_arg() {
    var buf = $buf();
    assert buf:write(123) == 3;
    assert buf:write("foo") == 3;
    assert buf:count() == 6;
    assert buf:to_str() == "123foo";
    assert buf:count() == 0;
}


def $test_write_with_multiple_args() {
    var buf = $buf();
    assert buf:write("{} and {}", 123, "foo") == 11;
    assert buf:count() == 11;
    assert buf:to_str() == "123 and foo";
    assert buf:count() == 0;
}


def $test_write_with_buffer_arg() {
    var src_buf = $buf("foo");
    var dst_buf = $buf();
    assert dst_buf:write(src_buf) == 3;
    assert dst_buf:count() == 3;
    assert dst_buf:to_str() == "foo";
}


def $test_stringification() {
    var buf = $buf();
    assert buf:count() == 0;
    assert $str(buf) == "";

    buf:write("foo");
    assert buf:count() == 3;

    assert $str(buf) == "foo";
    assert buf:count() == 3;

    assert $str(buf) == "foo";
    assert buf:count() == 3;

    buf:write("bar");
    assert buf:count() == 6;

    assert $str(buf) == "foobar";
    assert buf:count() == 6;
}


def $test_to_str() {
    var buf = $buf();
    assert buf:count() == 0;
    assert buf:to_str() == "";

    buf:write("foo");
    assert buf:count() == 3;

    assert buf:to_str() == "foo";
    assert buf:count() == 0;

    buf:write("foobar");
    assert buf:count() == 6;

    assert buf:to_str() == "foobar";
    assert buf:count() == 0;
}


def $test_as_str() {
    var buf = $buf();
    assert buf:count() == 0;
    assert buf:as_str() == "";

    buf:write("foo");
    assert buf:count() == 3;

    assert buf:as_str() == "foo";
    assert buf:count() == 3;

    assert buf:as_str() == "foo";
    assert buf:count() == 3;

    buf:write("bar");
    assert buf:count() == 6;

    assert buf:as_str() == "foobar";
    assert buf:count() == 6;
}


def $test_new_buf_with_size_and_fill() {
    var buf1 = $buf(10, 97);
    assert buf1:count() == 10;
    assert buf1[0] == 97;

    var buf2 = $buf(10, 'a');
    assert buf2:count() == 10;
    assert buf2[0] == 97;
    assert buf2[0] == 'a';
}


def $test_new_buf_from_string() {
    var b1 = $buf("");
    assert b1:count() == 0;

    var b2 = $buf("foo");
    assert b2:count() == 3;
    assert b2[0] == 'f';
    assert b2[1] == 'o';
    assert b2[2] == 'o';
}


def $test_clear() {
    var buf = $buf("foobar");
    assert buf:count() == 6;

    buf:clear();
    assert buf:count() == 0;

    buf:write("abc");
    assert buf:count() == 3;
    assert buf[0] == 'a';
    assert buf[1] == 'b';
    assert buf[2] == 'c';
}


def $test_out_of_bounds_indexing() {
    var buf = $buf("foobar");
    assert buf:count() == 6;

    assert $is_err(try buf[123]);
    assert $is_err(try (buf[123] = 0));

    assert $is_err(try buf:get(123));
    assert $is_err(try buf:set(123, 0));
}


def $test_resize() {
    var buf = $buf("foobar");
    assert buf:count() == 6;
    assert buf:as_str() == "foobar";

    buf:resize(-1);
    assert buf:count() == 5;
    assert buf:as_str() == "fooba";

    buf:resize(-2);
    assert buf:count() == 3;
    assert buf:as_str() == "foo";

    assert $is_err(try buf:resize(-99));

    buf:resize(0);
    assert buf:count() == 0;
    assert buf:as_str() == "";

    buf:resize(0);
    assert buf:count() == 0;
    assert buf:as_str() == "";

    buf:write("foobar");
    assert buf:count() == 6;
    assert buf:as_str() == "foobar";

    buf:resize(3);
    assert buf:count() == 3;
    assert buf:as_str() == "foo";

    buf:resize(6);
    assert buf:count() == 6;
    assert buf:as_str() == "foo\0\0\0";

    buf:resize(12, 'X');
    assert buf:count() == 12;
    assert buf:as_str() == "foo\0\0\0XXXXXX";

    buf:resize(18, 97);
    assert buf:count() == 18;
    assert buf:as_str() == "foo\0\0\0XXXXXXaaaaaa";

    assert $is_err(try buf:resize(24, 999));
    assert $is_err(try buf:resize(24, -123));
}


def $test_negative_indexes() {
    var buf = $buf("foobar");

    assert buf[-1] == 'r';
    assert buf[-2] == 'a';
    assert buf[-3] == 'b';

    assert buf:get(-1) == 'r';
    assert buf:get(-2) == 'a';
    assert buf:get(-3) == 'b';

    buf[-1] = 'z';
    buf[-2] = 'y';
    buf[-3] = 'x';
    assert buf:as_str() == "fooxyz";

    buf:set(-1, 'c');
    buf:set(-2, 'b');
    buf:set(-3, 'a');
    assert buf:as_str() == "fooabc";
}


def $test_match_with_str() {
    var buf = $buf("foobar");

    assert buf:match("foobar", 0);
    assert buf:match("foo", 0);
    assert buf:match("oob", 1);
    assert buf:match("oba", 2);
    assert buf:match("bar", 3);

    assert !buf:match("foox", 0);
    assert !buf:match("xfoo", 0);
    assert !buf:match("foobarxyz", 0);
    assert !buf:match("foobarxyz", 1);

    assert buf:match("", 0);
    assert buf:match("", 1);
    assert buf:match("", 2);

    assert !$buf():match("xxx", 0);
    assert !$buf():match("xxx", 1);
    assert !$buf():match("xxx", 2);
}


def $test_match_with_buf() {
    var buf = $buf("foobar");

    assert buf:match($buf("foobar"), 0);
    assert buf:match($buf("foo"), 0);
    assert buf:match($buf("oob"), 1);
    assert buf:match($buf("oba"), 2);
    assert buf:match($buf("bar"), 3);

    assert !buf:match($buf("foox"), 0);
    assert !buf:match($buf("xfoo"), 0);
    assert !buf:match($buf("foobarxyz"), 0);
    assert !buf:match($buf("foobarxyz"), 1);

    assert buf:match($buf(), 0);
    assert buf:match($buf(), 1);
    assert buf:match($buf(), 2);

    assert !$buf():match($buf("xxx"), 0);
    assert !$buf():match($buf("xxx"), 1);
    assert !$buf():match($buf("xxx"), 2);
}


def $test_slice() {
    var buf = $buf("foobar");

    assert buf:slice(0, 0):to_str() == "";
    assert buf:slice(0, 3):to_str() == "foo";
    assert buf:slice(3, 3):to_str() == "bar";
    assert buf:slice(6, 0):to_str() == "";
    assert buf:slice(0, buf:count()):to_str() == "foobar";

    assert $is_err(try buf:slice(0, 7));
    assert $is_err(try buf:slice(3, 7));
    assert $is_err(try buf:slice(6, 1));
    assert $is_err(try $buf():slice(0, 1));
}


def $test_slice_with_negative_start_index() {
    var buf = $buf("foobar");

    assert buf:slice(-1, 1):to_str() == "r";
    assert buf:slice(-2, 2):to_str() == "ar";

    assert $is_err(try buf:slice(-1, 2));
    assert $is_err(try $buf():slice(-1, 1));
}


def $test_slice_with_missing_length() {
    var buf = $buf("foobar");

    assert buf:slice(0):to_str() == "foobar";
    assert buf:slice(3):to_str() == "bar";
    assert buf:slice(6):to_str() == "";

    assert buf:slice(-1):to_str() == "r";
    assert buf:slice(-3):to_str() == "bar";

    assert $is_err(try buf:slice(7));
    assert $is_err(try $buf():slice(-1));
}


def $test_to_hex() {
    assert $buf("foo"):to_hex() == `\x66\x6F\x6F`;
}


def $test_contains_string() {
    var buf = $buf("foobar");

    assert buf:contains("foobar");
    assert buf:contains("foo");
    assert buf:contains("bar");
    assert !buf:contains("xxx");
    assert !buf:contains("foobarfoobar");

    assert !$buf():contains("xxx");

    assert buf:contains("");
    assert $buf():contains("");

    assert "foobar" in buf;
    assert "foo" in buf;
    assert "bar" in buf;
    assert "" in buf;
    assert !("xxx" in buf);
}


def $test_contains_buffer() {
    var buf = $buf("foobar");

    assert buf:contains($buf("foobar"));
    assert buf:contains($buf("foo"));
    assert buf:contains($buf("bar"));
    assert !buf:contains($buf("xxx"));
    assert !buf:contains($buf("foobarfoobar"));

    assert !$buf():contains($buf("xxx"));

    assert buf:contains($buf());
    assert $buf():contains($buf());

    assert $buf("foobar") in buf;
    assert $buf("foo") in buf;
    assert $buf("bar") in buf;
    assert $buf() in buf;
    assert !($buf("xxx") in buf);
}
