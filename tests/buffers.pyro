assert !$is_buf("foo");

var foo = $buf();
assert $is_buf(foo);
assert foo:count() == 0;
assert foo:is_empty();

foo:write_byte(0x61);
assert foo:count() == 1;
assert !foo:is_empty();

foo:write_byte(0x62);
assert foo:count() == 2;

foo:write_byte(0x63);
assert foo:count() == 3;

var string = foo:to_str();
assert string == "abc";
assert foo:count() == 0;

foo:write_byte(0x64);
assert foo:count() == 1;
assert foo:get(0) == 0x64;

foo:set(0, 0x65);
assert foo:count() == 1;
assert foo:get(0) == 0x65;

assert foo[0] == 0x65;
foo[0] = 0x66;
assert foo[0] == 0x66;


def $test_write_with_single_arg() {
    var buf = $buf();
    assert buf:write(123) == 3;
    assert buf:write("foo") == 3;
    assert buf:count() == 6;
    assert buf:to_str() == "123foo";
    assert buf:count() == 0;
}


def $test_write_with_multiple_args() {
    var buf = $buf();
    assert buf:write("{} and {}", 123, "foo") == 11;
    assert buf:count() == 11;
    assert buf:to_str() == "123 and foo";
    assert buf:count() == 0;
}


def $test_write_with_buffer_arg() {
    var src_buf = $buf("foo");
    var dst_buf = $buf();
    assert dst_buf:write(src_buf) == 3;
    assert dst_buf:count() == 3;
    assert dst_buf:to_str() == "foo";
}


def $test_stringification() {
    var buf = $buf();
    assert buf:count() == 0;
    assert $str(buf) == "";

    buf:write("foo");
    assert buf:count() == 3;

    assert $str(buf) == "foo";
    assert buf:count() == 3;

    assert $str(buf) == "foo";
    assert buf:count() == 3;

    buf:write("bar");
    assert buf:count() == 6;

    assert $str(buf) == "foobar";
    assert buf:count() == 6;
}


def $test_to_str() {
    var buf = $buf();
    assert buf:count() == 0;
    assert buf:to_str() == "";

    buf:write("foo");
    assert buf:count() == 3;

    assert buf:to_str() == "foo";
    assert buf:count() == 0;

    buf:write("foobar");
    assert buf:count() == 6;

    assert buf:to_str() == "foobar";
    assert buf:count() == 0;
}


def $test_as_str() {
    var buf = $buf();
    assert buf:count() == 0;
    assert buf:as_str() == "";

    buf:write("foo");
    assert buf:count() == 3;

    assert buf:as_str() == "foo";
    assert buf:count() == 3;

    assert buf:as_str() == "foo";
    assert buf:count() == 3;

    buf:write("bar");
    assert buf:count() == 6;

    assert buf:as_str() == "foobar";
    assert buf:count() == 6;
}


def $test_new_buf_with_size_and_fill() {
    var buf1 = $buf(10, 97);
    assert buf1:count() == 10;
    assert buf1[0] == 97;

    var buf2 = $buf(10, 'a');
    assert buf2:count() == 10;
    assert buf2[0] == 97;
    assert buf2[0] == 'a';
}


def $test_new_buf_from_string() {
    var b1 = $buf("");
    assert b1:count() == 0;

    var b2 = $buf("foo");
    assert b2:count() == 3;
    assert b2[0] == 'f';
    assert b2[1] == 'o';
    assert b2[2] == 'o';
}


def $test_clear() {
    var buf = $buf("foobar");
    assert buf:count() == 6;

    buf:clear();
    assert buf:count() == 0;

    buf:write("abc");
    assert buf:count() == 3;
    assert buf[0] == 'a';
    assert buf[1] == 'b';
    assert buf[2] == 'c';
}


def $test_out_of_bounds_indexing() {
    var buf = $buf("foobar");
    assert buf:count() == 6;

    assert $is_err(try buf[123]);
    assert $is_err(try (buf[123] = 0));

    assert $is_err(try buf:get(123));
    assert $is_err(try buf:set(123, 0));
}


def $test_resize() {
    var buf = $buf("foobar");
    assert buf:count() == 6;
    assert buf:as_str() == "foobar";

    buf:resize(-1);
    assert buf:count() == 5;
    assert buf:as_str() == "fooba";

    buf:resize(-2);
    assert buf:count() == 3;
    assert buf:as_str() == "foo";

    assert $is_err(try buf:resize(-99));

    buf:resize(0);
    assert buf:count() == 0;
    assert buf:as_str() == "";

    buf:resize(0);
    assert buf:count() == 0;
    assert buf:as_str() == "";

    buf:write("foobar");
    assert buf:count() == 6;
    assert buf:as_str() == "foobar";

    buf:resize(3);
    assert buf:count() == 3;
    assert buf:as_str() == "foo";

    buf:resize(6);
    assert buf:count() == 6;
    assert buf:as_str() == "foo\0\0\0";

    buf:resize(12, 'X');
    assert buf:count() == 12;
    assert buf:as_str() == "foo\0\0\0XXXXXX";

    buf:resize(18, 97);
    assert buf:count() == 18;
    assert buf:as_str() == "foo\0\0\0XXXXXXaaaaaa";

    assert $is_err(try buf:resize(24, 999));
    assert $is_err(try buf:resize(24, -123));
}
