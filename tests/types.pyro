# Atomic types.
var a: i64;
var b: i64 = 123;
var c: i64?;
var d: i64? = null;

# Containers 1: vectors.
var e: vec;
var f: vec[i64];
var g: vec[i64] = [123, 456];
var h: vec?[i64] = null;
var i: vec?[i64?] = null;

# Containers 2: maps.
var j: map;
var k: map[i64, str];
var l: map[i64, str] = {123 = "abc", 456 = "def"};
var m: map?[i64, str];
var n: map?[i64, str?] = null;

# Containers 3: tuples.
var o: tup;
var p: tup[i64];
var q: tup[i64, str];
var r: tup[i64, str, bool];
var s: tup[i64, str, bool] = $tup(123, "abc", true);
var t: tup?[i64?, str?, bool?] = null;

# Unions.
var u: i64|str;
var v: i64|str|bool;
var w: vec[i64|f64];
var x: vec[i64|f64] | tup[i64|f64, i64|f64];

# Parameters and return values.
def func1(foo: i64, bar: str) {}
def func2(foo: i64, bar: str) -> bool {}
def func3() -> bool {}

# Callables 1: no parameters.
var c1: func;
var c2: func -> bool;

# Callables 2: with parameters.
var c3: func();
var c4: func() -> bool;
var c5: func(i64);
var c6: func(i64, str);
var c7: func(i64, str) -> bool;
var c8: func?();
var c9: func?(i64?, str?) -> bool?;

# Mixtures.
var m1: vec[map[i64, str?]];
var m2: tup[vec[i64], map[i64, str], bool?];
def m3(foo: map[i64, str|bool], bar: vec[i64?]) -> func(i64, str) -> bool {}
