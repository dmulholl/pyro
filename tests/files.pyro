import std::path;

assert !$is_file(123);
assert !$is_file("foo");

var test_dir = path::dirname($filepath);
var temp_filename = path::join(test_dir, "temp_data.txt");

assert $write_file(temp_filename, "foobar") == 6;
assert $read_file(temp_filename) == "foobar";

# Test creating an empty file.
with file = $file(temp_filename, "w") {
    assert $is_file(file);
}
assert $read_file(temp_filename) == "";

# Test :write().
with file = $file(temp_filename, "w") {
    assert file:write("foo") == 3;
    assert file:write(123) == 3;
    assert file:write("{} and {}", "bar", 456) == 11;
}
assert $read_file(temp_filename) == "foo123bar and 456";

# Test :write_byte().
with file = $file(temp_filename, "w") {
    file:write_byte('a');
    file:write_byte('b');
    file:write_byte('c');
    file:write_byte(100);
}
assert $read_file(temp_filename) == "abcd";

# Test :read().
$write_file(temp_filename, "foobar");
with file = $file(temp_filename, "r") {
    var buf = file:read();
    assert $is_buf(buf);
    assert buf:to_str() == "foobar";
}

# Test :read_byte().
$write_file(temp_filename, "abc");
with file = $file(temp_filename, "r") {
    assert file:read_byte() == 'a';
    assert file:read_byte() == 'b';
    assert file:read_byte() == 'c';
    assert file:read_byte() == null;
}

# Test :read_bytes().
$write_file(temp_filename, "abcdef");
with file = $file(temp_filename, "r") {
    var buf = file:read_bytes(3);
    assert buf:to_str() == "abc";
}

# Test :read_string().
$write_file(temp_filename, "foo\r\nbar\nbaz");
with file = $file(temp_filename, "r") {
    assert file:read_string() == "foo\r\nbar\nbaz";
    assert file:read_string() == "";
}

# Test :read_string() on an empty file.
$write_file(temp_filename, "");
with file = $file(temp_filename, "r") {
    assert file:read_string() == "";
}

path::remove(temp_filename);
