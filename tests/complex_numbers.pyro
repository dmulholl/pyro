class Complex {
    pub var re;
    pub var im;

    def $init(re, im) {
        self.re = re;
        self.im = im;
    }

    def $op_binary_equals_equals(other) {
        if $is_instance_of(other, Complex) {
            return self.re == other.re && self.im == other.im;
        }
        return false;
    }

    def $op_binary_plus(other) {
        if $is_instance_of(other, Complex) {
            return Complex(self.re + other.re, self.im + other.im);
        }
        $panic("invalid operation");
    }

    def $op_binary_star(other) {
        if $is_instance_of(other, Complex) {
            var re = self.re * other.re - self.im * other.im;
            var im = self.re * other.im + self.im * other.re;
            return Complex(re, im);
        }
        if $is_i64(other) || $is_f64(other) {
            return Complex(self.re * other, self.im * other);
        }
        $panic("invalid operation");
    }

    def $rop_binary_star(other) {
        return self:$op_binary_star(other);
    }

    def $op_unary_minus() {
        return Complex(-self.re, -self.im);
    }
}

assert Complex(1, 2) == Complex(1, 2);
assert Complex(1, 2) != Complex(1, 3);
assert Complex(1, 2) != 123;

var c1 = Complex(1, 2) + Complex(3, 4);
assert c1.re == 1 + 3;
assert c1.im == 2 + 4;

var c2 = Complex(1, 2) * Complex(3, 4);
assert c2.re == -5;
assert c2.im == 10;

var c3 = -Complex(1, 2);
assert c3.re == -1;
assert c3.im == -2;

var c4 = Complex(1, 2) * 2;
assert c4.re == 2;
assert c4.im == 4;

var c5 = 2 * Complex(1, 2);
assert c4.re == 2;
assert c4.im == 4;

var c6 = Complex(1, 2);
c6 += Complex(3, 4);
assert c6 == Complex(4, 6);
