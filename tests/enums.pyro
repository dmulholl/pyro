enum Number {
    Undefined,
    One = 1,
    Two = 2,
    OtherTwo = 2,
}

assert $type(Number) == "enum";

assert $type(Number::Undefined) == "Number";
assert $type(Number::One) == "Number";
assert $type(Number::Two) == "Number";
assert $type(Number::OtherTwo) == "Number";

assert $is_enum_type(Number);
assert !$is_enum_type(Number::One);
assert !$is_enum_type("foo");

assert $is_enum_member(Number::One);
assert !$is_enum_member(Number);
assert !$is_enum_member("foo");

assert $is_enum_member_of_type(Number::One, Number);
assert !$is_enum_member_of_type(1, Number);
assert !$is_enum_member_of_type("foo", Number);
assert $is_err(try $is_enum_member_of_type(Number::One, Number::Two));
assert $is_err(try $is_enum_member_of_type(Number::One, "foo"));

assert Number::Undefined:value() == null;
assert Number::One:value() == 1;
assert Number::Two:value() == 2;
assert Number::OtherTwo:value() == 2;

assert Number::Undefined:type() == Number;
assert Number::One:type() == Number;
assert Number::Two:type() == Number;
assert Number::OtherTwo:type() == Number;

with members = Number:members():to_vec() {
    assert members:count() == 4;
    assert Number::Undefined in members;
    assert Number::One in members;
    assert Number::Two in members;
    assert Number::OtherTwo in members;
}

var number_values = [];
for value in Number {
    number_values:append(value);
}
assert number_values:count() == 4;
assert Number::Undefined in number_values;
assert Number::One in number_values;
assert Number::Two in number_values;
assert Number::OtherTwo in number_values;

with instance = Number::Undefined {
    assert instance == Number::Undefined;
    assert instance != Number::One;
    assert instance != Number::Two;
    assert instance != Number::OtherTwo;
    assert instance != null;
    assert instance != 0;
    assert instance:value() == null;

    assert Number::Undefined == Number::Undefined;
    assert Number::Undefined != Number::One;
    assert Number::Undefined != Number::Two;
    assert Number::Undefined != Number::OtherTwo;
    assert Number::Undefined != null;
    assert Number::Undefined != 0;
    assert Number::Undefined:value() == null;
}

with instance = Number::One {
    assert instance != Number::Undefined;
    assert instance == Number::One;
    assert instance != Number::Two;
    assert instance != Number::OtherTwo;
    assert instance != "One";
    assert instance != 1;
    assert instance:value() == 1;

    assert Number::One != Number::Undefined;
    assert Number::One == Number::One;
    assert Number::One != Number::Two;
    assert Number::One != Number::OtherTwo;
    assert Number::One != "One";
    assert Number::One != 1;
    assert Number::One:value() == 1;
}

with instance = Number::Two {
    assert instance != Number::Undefined;
    assert instance != Number::One;
    assert instance == Number::Two;
    assert instance != Number::OtherTwo;
    assert instance != "Two";
    assert instance != 2;
    assert instance:value() == 2;

    assert Number::Two != Number::Undefined;
    assert Number::Two != Number::One;
    assert Number::Two == Number::Two;
    assert Number::Two != Number::OtherTwo;
    assert Number::Two != "Two";
    assert Number::Two != 2;
    assert Number::Two:value() == 2;
}

with instance = Number::OtherTwo {
    assert instance != Number::Undefined;
    assert instance != Number::One;
    assert instance != Number::Two;
    assert instance == Number::OtherTwo;
    assert instance != "OtherTwo";
    assert instance != 2;
    assert instance:value() == 2;

    assert Number::OtherTwo != Number::Undefined;
    assert Number::OtherTwo != Number::One;
    assert Number::OtherTwo != Number::Two;
    assert Number::OtherTwo == Number::OtherTwo;
    assert Number::OtherTwo != "OtherTwo";
    assert Number::OtherTwo != 2;
    assert Number::OtherTwo:value() == 2;
}
