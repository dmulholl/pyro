import std::url;
import std::json;


def term_width() -> i64 {
    var result = $stderr:get_terminal_size();
    if $is_err(result) {
        return 80;
    }

    return result[0];
}


def extract_response_status_code(status_line: str) -> i64|err {
    if !status_line:starts_with("HTTP") {
        return $err("invalid response");
    }

    var tokens = status_line:split();
    if tokens:count() < 2 {
        return $err("invalid response");
    }

    var code = try $i64(tokens[1]);
    if $is_err(code) {
        return $err("invalid response");
    }

    return code;
}


def make_response(headers: vec[str], body: buf) -> Response|err {
    if headers:is_empty() {
        return $err("invalid response");
    }

    var code = extract_response_status_code(headers[0]);
    if $is_err(code) {
        return code;
    }

    var response = Response();
    response.code = code;
    response.body = body;
    response.raw_headers = headers:join("\n");

    for header in headers:iter():skip_first(1) {
        let index = header:index_of(":");
        if $is_err(index) {
            return $err("invalid response");
        }

        let key = header:slice(0, index);
        let value = header:slice(index + 1);

        response.headers[key:strip():to_ascii_lower()] = value:strip();
    }

    return response;
}


pub class Response {
    pub var code: i64 = 0;
    pub var raw_headers: str = "";
    pub var headers: map[str, str];
    pub var body: buf;

    def $init() {
        self.headers = {};
        self.body = $buf();
    }

    pub def has_header(key: str) -> bool {
        return key:to_ascii_lower() in self.headers;
    }

    pub def header(key: str) -> str|err {
        return self.headers[key:to_ascii_lower()];
    }

    pub def from_json() -> map|vec|str|i64|f64|bool|null|err {
        return json::from_json(self.body:to_str());
    }
}


pub class Request {
    var url: str = "";
    var body: str|buf = "";
    var debug: bool = false;
    var timeout_secs: f64 = 0.0;
    var params: map[str, vec[str]];
    var headers: vec[str];
    var custom_args: vec[str];

    def $init() {
        self.params = {};
        self.headers = [];
        self.custom_args = [];
    }

    pub def append_args(*args: str) -> Request {
        self.custom_args:append_values(args);
        return self;
    }

    pub def http_auth(username: str, password: str) {
        self.custom_args:append("--user", "${username}:${password}");
        return self;
    }

    pub def url(value: str) -> Request {
        assert $is_str(value), "url(): invalid argument, expected a string";
        self.url = value;
        return self;
    }

    pub def param(key: any, value: any) -> Request {
        key = $str(key);
        value = $str(value);

        if key in self.params {
            self.params[key]:append(value);
        } else {
            self.params[key] = [value];
        }

        return self;
    }

    pub def header(value: str) -> Request {
        assert $is_str(value), "header(): invalid argument, expected a string";
        self.headers:append(value);
        return self;
    }

    pub def body(value: str|buf) -> Request {
        assert $is_str(value) || $is_buf(value), "body(): invalid argument, expected a string or buffer";
        self.body = value;
        return self;
    }

    pub def debug() -> Request {
        self.debug = true;
        return self;
    }

    pub def timeout(seconds: f64) -> Request {
        assert $is_f64(seconds), "timeout(): invalid argument, expected an f64";
        self.timeout_secs = seconds;
        return self;
    }

    pub def HEAD() -> Response|err {
        return self:make_head_request("HEAD");
    }

    pub def GET() -> Response|err {
        return self:make_request_without_body("GET");
    }

    pub def OPTIONS() -> Response|err {
        return self:make_request_without_body("OPTIONS");
    }

    pub def POST() -> Response|err {
        return self:make_request_with_body("POST");
    }

    pub def PUT() -> Response|err {
        return self:make_request_with_body("PUT");
    }

    pub def PATCH() -> Response|err {
        return self:make_request_with_body("PATCH");
    }

    pub def DELETE() -> Response|err {
        return self:make_request_with_body("DELETE");
    }

    def make_head_request(method: str) -> Response|err {
        if self.url:is_empty() {
            return $err("${method}(): missing url");
        }

        var args = ["--verbose", "--silent", "--head"];

        if self.timeout_secs > 0.0 {
            args:append("--max-time");
            args:append($str(self.timeout_secs));
        }

        for header in self.headers {
            args:append("--header");
            args:append(header);
        }

        args += self.custom_args;

        var url = self.url;
        if self.params:count() > 0 {
            url += "?" + self:make_query_string();
        }
        args:append(url);

        if self.debug {
            $eprintln("-" * term_width());
            $eprintln("ARGS: ${args}");
            $eprintln("-" * term_width());
        }

        var result = try $run("curl", args);
        if $is_err(result) {
            return $err("${method}(): ${result}");
        }

        var (exit_code, out_buf, err_buf) = result;

        if exit_code != 0 {
            let err_msg = err_buf
                :to_str()
                :replace("\n* Closing connection", "")
                :replace("\n* ", ": ")
                :replace("* ", "")
                :strip();
            return $err("${method}(): ${err_msg}");
        }

        var headers = out_buf
            :to_str()
            :lines()
            :map(def(line) { return line:strip(); })
            :filter(def(line) { return !line:is_empty(); })
            :to_vec();

        return make_response(headers, out_buf);
    }

    def make_request_without_body(method: str) -> Response|err {
        if self.url:is_empty() {
            return $err("${method}(): missing url");
        }

        var args = ["--verbose", "--silent", "--request", method];

        if self.timeout_secs > 0.0 {
            args:append("--max-time");
            args:append($str(self.timeout_secs));
        }

        for header in self.headers {
            args:append("--header");
            args:append(header);
        }

        args += self.custom_args;

        var url = self.url;
        if self.params:count() > 0 {
            url += "?" + self:make_query_string();
        }
        args:append(url);

        if self.debug {
            $eprintln("-" * term_width());
            $eprintln("ARGS: ${args}");
            $eprintln("-" * term_width());
        }

        var result = try $run("curl", args);
        if $is_err(result) {
            return $err("${method}(): ${result}");
        }

        var (exit_code, out_buf, err_buf) = result;

        if exit_code != 0 {
            let err_msg = err_buf
                :to_str()
                :replace("\n* Closing connection", "")
                :replace("\n* ", ": ")
                :replace("* ", "")
                :strip();
            return $err("${method}(): ${err_msg}");
        }

        if self.debug {
            $eprintln($str(err_buf):strip());
            $eprintln("-" * term_width());
        }

        var headers = err_buf
            :to_str()
            :lines()
            :filter(def(line) { return line:starts_with("< "); })
            :map(def(line) { return line:slice(2):strip(); })
            :filter(def(line) { return !line:is_empty(); })
            :to_vec();

        return make_response(headers, out_buf);
    }

    def make_request_with_body(method: str) -> Response|err {
        if self.url:is_empty() {
            return $err("${method}(): missing url");
        }

        var args = ["--verbose", "--silent", "--request", method, "--data-binary", "@-"];

        if self.timeout_secs > 0.0 {
            args:append("--max-time");
            args:append($str(self.timeout_secs));
        }

        for header in self.headers {
            args:append("--header");
            args:append(header);
        }

        var body = self.body;
        if self.params:count() > 0 {
            body = self:make_query_string();
            args:append("--header");
            args:append("Content-Type: application/x-www-form-urlencoded");
        }

        args += self.custom_args;
        args:append(self.url);

        if self.debug {
            $eprintln("-" * term_width());
            $eprintln("ARGS: ${args}");
            $eprintln("-" * term_width());
            $eprintln("BODY: ${body}");
            $eprintln("-" * term_width());
        }

        var result = try $run("curl", args, body);
        if $is_err(result) {
            return $err("${method}(): ${result}");
        }

        var (exit_code, out_buf, err_buf) = result;

        if exit_code != 0 {
            let err_msg = err_buf
                :to_str()
                :replace("\n* Closing connection", "")
                :replace("\n* ", ": ")
                :replace("* ", "")
                :strip();
            return $err("${method}(): ${err_msg}");
        }

        if self.debug {
            $eprintln($str(err_buf):strip());
            $eprintln("-" * term_width());
        }

        var headers = err_buf
            :to_str()
            :lines()
            :filter(def(line) { return line:starts_with("< "); })
            :map(def(line) { return line:slice(2):strip(); })
            :filter(def(line) { return !line:is_empty(); })
            :to_vec();

        return make_response(headers, out_buf);
    }

    def make_query_string() -> str {
        var list = [];

        for (key, values) in self.params {
            var encoded_key = url::url_encode(key);
            for value in values {
                var encoded_value = url::url_encode(value);
                list:append("${encoded_key}=${encoded_value}");
            }
        }

        return list:join("&");
    }
}


pub def HEAD(url: str) -> Response|err {
    return Request()
        :url(url)
        :HEAD();
}


pub def GET(url: str) -> Response|err {
    return Request()
        :url(url)
        :GET();
}


pub def OPTIONS(url: str) -> Response|err {
    return Request()
        :url(url)
        :OPTIONS();
}


pub def POST(url: str, body: str|buf) -> Response|err {
    return Request()
        :url(url)
        :body(body)
        :POST();
}


pub def PUT(url: str, body: str|buf) -> Response|err {
    return Request()
        :url(url)
        :body(body)
        :PUT();
}


pub def PATCH(url: str, body: str|buf) -> Response|err {
    return Request()
        :url(url)
        :body(body)
        :PATCH();
}


pub def DELETE(url: str, body: str|buf = "") -> Response|err {
    return Request()
        :url(url)
        :body(body)
        :DELETE();
}
