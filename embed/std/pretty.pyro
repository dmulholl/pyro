def print_instance(buf: buf, instance: instance, indent: i64, current_indent: i64) {
    if $fields(instance):count() == 0 {
        buf:write($debug(instance));
        return;
    }

    if indent == 0 {
        buf:write($type(instance));
        buf:write(" {");
        var is_first = true;

        for field_name in $fields(instance) {
            if !is_first {
                buf:write(", ");
            }
            buf:write(field_name);
            buf:write(": ");
            print_value(buf, $field(instance, field_name), 0, 0);
            is_first = false;
        }

        buf:write("}");
        return;
    }

    var spaces = " " * (current_indent + indent);
    buf:write($type(instance));
    buf:write(" {");

    for field_name in $fields(instance) {
        buf:write("\n");
        buf:write(spaces);
        buf:write(field_name);
        buf:write(": ");
        print_value(buf, $field(instance, field_name), indent, current_indent + indent);
    }

    buf:write("\n");
    buf:write(" " * current_indent);
    buf:write("}");
}


def print_map(buf: buf, map: map, indent: i64, current_indent: i64) {
    if map:count() == 0 {
        buf:write("{}");
        return;
    }

    if indent == 0 {
        buf:write("{");
        var is_first = true;

        for (key, value) in map {
            if !is_first {
                buf:write(", ");
            }
            buf:write($debug(key));
            buf:write(" = ");
            print_value(buf, value, 0, 0);
            is_first = false;
        }

        buf:write("}");
        return;
    }

    var spaces = " " * (current_indent + indent);
    buf:write("{");

    for (key, value) in map {
        buf:write("\n");
        buf:write(spaces);
        buf:write($debug(key));
        buf:write(" = ");
        print_value(buf, value, indent, current_indent + indent);
        buf:write(",");
    }

    buf:write("\n");
    buf:write(" " * current_indent);
    buf:write("}");
}


def print_container(buf: buf, container: vec|tup|stack|queue|set, indent: i64, current_indent: i64, opener: str, closer: str) {
    if container:count() == 0 {
        buf:write(opener);
        buf:write(closer);
        return;
    }

    if indent == 0 {
        buf:write(opener);
        var is_first = true;

        for item in container {
            if !is_first {
                buf:write(", ");
            }
            print_value(buf, item, 0, 0);
            is_first = false;
        }

        buf:write(closer);
        return;
    }

    var spaces = " " * (current_indent + indent);
    buf:write(opener);

    for item in container {
        buf:write("\n");
        buf:write(spaces);
        print_value(buf, item, indent, current_indent + indent);
        buf:write(",");
    }

    buf:write("\n");
    buf:write(" " * current_indent);
    buf:write(closer);
}


def print_value(buf: buf, value: any, indent: i64, current_indent: i64) {
    if $is_vec(value) || $is_stack(value) || $is_queue(value) {
        print_container(buf, value, indent, current_indent, "[", "]");
    } else if $is_tup(value) {
        print_container(buf, value, indent, current_indent, "(", ")");
    } else if $is_set(value) {
        print_container(buf, value, indent, current_indent, "{", "}");
    } else if $is_map(value) {
        print_map(buf, value, indent, current_indent);
    } else if $is_instance(value) {
        print_instance(buf, value, indent, current_indent);
    } else {
        buf:write($debug(value));
    }
}


pub def print(arg: any, indent: i64 = 4) -> str {
    if indent < 0 {
        indent = 0;
    }

    var buf = $buf();
    print_value(buf, arg, indent, 0);

    return buf:to_str();
}
