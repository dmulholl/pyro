import std::fs;

var init_script = "
var $filepath;

pub def set_filepath(filepath) {
    $filepath = filepath;
}
";

def red(arg: any) -> str {
    if NO_COLOR {
        return $str(arg);
    }
    return "\x1B[1;31m${arg}\x1B[0m";
}

def green(arg: any) -> str {
    if NO_COLOR {
        return $str(arg);
    }
    return "\x1B[1;32m${arg}\x1B[0m";
}

def grey(arg: any) -> str {
    if NO_COLOR {
        return $str(arg);
    }
    return "\x1B[1;90m${arg}\x1B[0m";
}

def red_bg(arg: any) -> str {
    if NO_COLOR {
        return $str(arg);
    }
    return "\x1B[1;41;30m${arg}\x1B[0m";
}

def green_bg(arg: any) -> str {
    if NO_COLOR {
        return $str(arg);
    }
    return "\x1B[1;42;30m${arg}\x1B[0m";
}

def make_module(filepath) {
    var module = $exec(init_script);
    module::set_filepath(filepath);
    return module;
}

def add_import_roots_from_path(filepath) {
    var stashed_roots = $roots:copy();

    var real_path = try fs::realpath(filepath);
    if $is_err(real_path) {
        $exit("error: failed to resolve path '${filepath}': ${real_path}");
    }

    var parent_path = fs::dirname(real_path);
    var modules_path = fs::join(parent_path, "modules");

    $roots:append(parent_path);
    $roots:append(modules_path);

    return stashed_roots;
}

def restore_stashed_import_roots(stashed_roots) {
    $roots:clear();

    for root in stashed_roots {
        $roots:append(root);
    }
}

def run_tests_debug_mode() {
    for filepath in $args {
        if !fs::is_file(filepath) {
            $exit("error: invalid path '${filepath}'");
        }

        var code = try $read_file(filepath);
        if $is_err(code) {
            $exit("error: failed to read file '${filepath}': ${code}");
        }

        var stashed_roots = add_import_roots_from_path(filepath);

        var module = make_module(filepath);
        $exec(code, filepath, module);

        for name in module:all_members() {
            if name:starts_with("$test_") && $is_func(module:member(name)) {
                module:member(name)();
            }
        }

        restore_stashed_import_roots(stashed_roots);
    }
}

def run_tests() {
    var start_time = $clock();
    var funcs_passed = 0;
    var funcs_failed = 0;
    var files_passed = 0;
    var files_failed = 0;

    for filepath in $args {
        if !fs::is_file(filepath) {
            $exit("error: invalid path '${filepath}'");
        }

        var code = try $read_file(filepath);
        if $is_err(code) {
            $exit("error: failed to read file '${filepath}': ${code}");
        }

        $print("{}  {}", grey("[  ····  ]"), filepath);
        $stdout():flush();

        var stashed_roots = add_import_roots_from_path(filepath);
        var module = make_module(filepath);

        var result = try $exec(code, filepath, module);
        if $is_err(result) {
            $print("\r{}  {}  {}\n", grey("["), red("FAIL"), grey("]"));
            if VERBOSE {
                $print(grey("            line ${result["line"]}: ${result}\n"));
            }
            files_failed += 1;
            restore_stashed_import_roots(stashed_roots);
            continue;
        }

        var had_failed_test_func = false;

        for name in module:all_members() {
            if name:starts_with("$test_") && $is_func(module:member(name)) {
                var result = try module:member(name)();
                if $is_err(result) {
                    if !had_failed_test_func {
                        $print("\r{}  {}  {}\n", grey("["), red("FAIL"), grey("]"));
                    }
                    had_failed_test_func = true;
                    funcs_failed += 1;
                    $print("            {}\n", red("× ${name}()"));
                    if VERBOSE {
                        $print(grey("              line ${result["line"]}: ${result}\n"));
                    }
                } else {
                    funcs_passed += 1;
                }
            }
        }

        if had_failed_test_func {
            files_failed += 1;
        } else {
            files_passed += 1;
            $print("\r{}  {}  {}\n", grey("["), green("PASS"), grey("]"));
        }

        restore_stashed_import_roots(stashed_roots);
    }

    var runtime = $clock() - start_time;

    if files_failed > 0 {
        $print("\n  {}  ", red_bg(" FAIL "));
    } else {
        $print("\n  {}  ", green_bg(" PASS "));
    }

    $print("  Files: {}/{}", files_passed, files_passed + files_failed);
    $print(" · Funcs: {}/{}", funcs_passed, funcs_passed + funcs_failed);
    $print(" · Time: {} secs\n", runtime);

    if files_failed > 0 {
        $exit(1);
    }
}

if DEBUG {
    run_tests_debug_mode();
} else {
    run_tests();
}
