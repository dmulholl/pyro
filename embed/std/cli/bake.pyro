import std::fs;
import std::cmd;
import std::log;

if !fs::is_file(SCRIPT) {
    log::fatal("'${SCRIPT}' is not a file");
}

let script_path = fs::abspath(SCRIPT);
let modules_path = fs::join(fs::dirname(script_path), "modules");

let output_path = if OUTPUT == "" {
    fs::abspath(fs::basename(script_path):strip_suffix(".pyro"))
} else {
    fs::abspath(OUTPUT)
}

log::info("baking binary: ${output_path}");

let homedir_path = $env("HOME");
if $is_err(homedir_path) {
    log::fatal("failed to read the HOME environment variable");
}

let repodir_path = fs::join(homedir_path, ".cache", "pyro", "repo");
let workdir_path = fs::join(homedir_path, ".cache", "pyro", "work");

if NO_CACHE {
    if let result = try cmd::rm(repodir_path); $is_err(result) {
        log::fatal("failed to delete '${repodir_path}': ${result}");
    }
}

if !fs::is_dir(repodir_path) {
    log::info("cloning repository: ${PYRO_REPO}");
    if let result = try cmd::git("clone", PYRO_REPO, repodir_path); $is_err(result) {
        log::fatal("failed to clone repository: ${result}");
    }
}

if let result = try fs::chdir(repodir_path); $is_err(result) {
    log::fatal("failed to change working directory to: ${repodir_path}: ${result}");
}

log::info("updating repository: ${PYRO_REPO}");
if let result = try cmd::git("checkout", "master"); $is_err(result) {
    log::fatal("failed to checkout branch 'master': ${result}");
}
if let result = try cmd::git("pull"); $is_err(result) {
    log::fatal("failed to run 'git pull' on branch 'master': ${result}");
}

log::info("checking out version: ${PYRO_VERSION}");
if let result = try cmd::git("checkout", PYRO_VERSION); $is_err(result) {
    log::fatal("failed to checkout '${PYRO_VERSION}': ${result}");
}

if let result = try cmd::rm(workdir_path); $is_err(result) {
    log::fatal("failed to delete '${workdir_path}': ${result}");
}

if let result = try cmd::cp(repodir_path, workdir_path); $is_err(result) {
    log::fatal("failed to copy '${repodir_path}' to '${workdir_path}': ${result}");
}

if let result = try fs::chdir(workdir_path); $is_err(result) {
    log::fatal("failed to change working directory to: ${workdir_path}: ${result}");
}

log::info("copying script: ${script_path}");
if let result = try cmd::cp(script_path, fs::join(workdir_path, "embed", "main.pyro")); $is_err(result) {
    log::fatal("failed to copy script: ${result}");
}

if fs::is_dir(modules_path) {
    log::info("copying modules: ${modules_path}");
    if let result = try cmd::cp(modules_path + "/.", fs::join(workdir_path, "embed")); $is_err(result) {
        log::fatal("failed to copy modules: ${result}");
    }
}

if EMBED != "" {
    let src_path = fs::abspath(EMBED);
    log::info("copying embedded files: ${src_path}");

    if !fs::is_dir(src_path) {
        log::fatal("invalid embed path, not a directory: ${src_path}");
    }

    if let result = try cmd::cp(src_path + "/.", fs::join(workdir_path, "embed")); $is_err(result) {
        log::fatal("failed to copy embedded files: ${result}");
    }
}

log::info("compiling binary");
if let result = try cmd::make("app"); $is_err(result) {
    log::fatal("failed to compile binary: ${result}");
}

log::info("moving binary to: ${output_path}");
let output_dirpath = fs::dirname(output_path);

if !fs::is_dir(output_dirpath) {
    if let result = try cmd::mkdir(output_dirpath); $is_err(result) {
        log::fatal("failed to create directory '${output_dirpath}': ${result}");
    }
}

if let result = try cmd::mv(fs::join(workdir_path, "build", "release", "app"), output_path); $is_err(result) {
    log::fatal("failed to move binary: ${result}");
}

log::info("okay");
