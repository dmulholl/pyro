#!/usr/bin/env pyro

var num_runs = 100;

# TESTS ------------------------------------------------------------------------

var global_variable = 0;

def fib(n) {
    if n < 2 {
        return n;
    }
    return fib(n - 1) + fib(n - 2);
}

class Object {
    pub var value;

    def $init(value) {
        self.value = value * 456 + 789;
    }

    pub def change_value(arg) {
        self.value += arg;
    }

    pub def get_value() {
        return self.value;
    }
}

def do_arithmetic(a, b, c, d) {
    var foo = (((a * 123 + b * 123.456 + c * 23) / 31) * a) / (b + 1) + 2.0 * d;
    var bar = ((foo * a) / (b + 1)) * c + 3 * d;
    var baz = foo + bar + a + b + c + d;
    var bam = foo * 2 + bar * 3 + baz * 4;
    return bam;
}

def do_string_stuff(str_a, str_b, str_sep) {
    var string = "";
    var vec = [];
    var local = "xyz";

    for i in $range(10) {
        string += ("foo" + str_a + str_b + str_sep + "bar" + local);
        for element in string:split(str_sep) {
            vec:append(element);
        }
    }

    return vec;
}

def make_adder(n) {
    def adds_n(arg) {
        return arg + n;
    }
    return adds_n;
}

def fizzbuzz(n) {
    if n % 15 == 0 {
        return "fizzbuzz";
    } else if n % 3 == 0 {
        return "fizz";
    } else if n % 5 == 0 {
        return "buzz";
    } else {
        return n;
    }
}

def benchmark() {
    var vec = $vec();
    var map = $map();

    # Recursive function calls.
    var fib_result = fib(25);
    vec:append(fib_result);
    map["fib"] = fib_result;

    # Arithmetic.
    for i in $range(1000) {
        var result = (i * 109153 + 257) / 253 - 751 + 4059.123;
        vec:append(result);
        map[i] = result;
    }

    # Arithmetic in function.
    for i in $range(10) {
        for j in $range(10) {
            for k in $range(10) {
                var result = do_arithmetic(i, j, k, i + j + k);
                vec:append(result);
                map[$fmt("{}-{}-{}", i, j, k)] = result;
            }
        }
    }

    # Initialize object in loop.
    for i in $range(1000) {
        var obj = Object(123 + i);
    }

    # Modify field in loop.
    var obj1 = Object(456);
    for i in $range(1000) {
        obj1.value += i;
    }

    # Call single method in loop.
    var obj2 = Object(789);
    for i in $range(1000) {
        obj2:change_value(i);
    }

    # Mixed field/method operations in loop.
    for i in $range(1000) {
        var obj = Object(999 + i);
        obj.value += i;
        obj:change_value(i);
        vec:append(obj:get_value());
        map[$str(i)] = obj:get_value();
    }

    # Strings.
    var string = "";
    for i in $range(1000) {
        string += $str(i);
        vec:append(string);
        map[i] = string;
    }

    # Closures.
    for i in $range(1000) {
        var func = make_adder(i);
        vec:append(func);
        vec:append(func(i));
        map[i] = func(i);
    }

    # FizzBuzz.
    for i in $range(1000) {
        vec:append(fizzbuzz(i));
        map[i] = fizzbuzz(i);
    }

    # Vector getting and setting.
    for i in $range(1000) {
        vec[i] = vec[i + 1];
    }

    # Map getting and setting.
    for i in $range(1000) {
        map[i] = map[i];
    }

    # Update global.
    for i in $range(1000) {
        global_variable += 1;
    }

    # Update local.
    var local_variable = 0;
    for i in $range(1000) {
        local_variable += 1;
    }

    # Type conversions.
    for i in $range(1000) {
        vec[i] = $i64($str(i));
    }

    # Sorting.
    var sort_vec = $vec();
    for i in $range(1000) {
        sort_vec:append(i);
    }
    sort_vec:shuffle();
    sort_vec:sort();

    # Iterating over a map.
    var new_map = $map();
    for (key, value) in map {
        new_map[key] = value;
    }

    # Do string stuff.
    for i in $range(10) {
        for j in $range(10) {
            var result = do_string_stuff($str(i), $str(j), ":");
            vec:append(result);
        }
    }
}

# END TESTS --------------------------------------------------------------------

def $time_benchmark() {
    benchmark();
}

def $test_benchmark() {
    benchmark();
}

def $main() {
    var start = $clock();
    for i in $range(num_runs) {
        benchmark();
    }
    var runtime = $clock() - start;
    var average = runtime / num_runs;
    var average_in_ms = average * 1000;
    $println("Average time: {0.6f} s :: {0.3f} ms", average, average_in_ms);
}
