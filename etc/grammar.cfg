# ------------ #
#  Statements  #
# ------------ #

program = statement* EOF ;

statement = block
          | declaration
          | echo_statement
          | assert_statement
          | if_statement
          | while_statement
          | for_statement
          | break_statement
          | continue_statement
          | return_statement
          | expression_statement ;

block = "{" ( statement )* "}" ;

declaration = variable_declaration | function_declaration | class_declaration ;

variable_declaration = "var" IDENTIFIER ( "=" expression )? ";" ;

function_declaration = "def" IDENTIFIER "(" parameters? ")" block ;

class_declaration = "class" IDENTIFIER ( "<" IDENTIFIER )?
                    "{"
                    ( variable_declaration | function_declaration )*
                    "}" ;

parameters = IDENTIFIER ( "," IDENTIFIER )* ;

expression_statement = expression ";" ;

if_statement = "if" expression block ( "else" ( if_statement | block ) )? ;

echo_statement = "echo" ( expression ( "," expression )* )? ";" ;

while_statement = "while" expression block ;

for_statement = "for"
                ( variable_declaration | expression_statement | ";" )
                expression? ";"
                expression?
                block ;

break_statement = "break" ";" ;

continue_statement = "continue" ";" ;

return_statement = "return" expression? ";" ;

# ------------- #
#  Expressions  #
# ------------- #

# Each rule matches expressions at its precedence level or higher.

expression = assignment ;

assignment = ( call "." )? IDENTIFIER ( "=" | "+=" | "-=" ) assignment | conditional ;

conditional = logical ( "?" logical "|" logical )? ;

logical = equivalence ( ( "and" | "or" ) equivalence )* ;

equivalence = comparative ( ( "!=" | "==" ) comparative )* ;

comparative = additive ( ( ">" | ">=" | "<" | "<=" ) additive )* ;

additive = multiplicative ( ( "-" | "+" ) multiplicative )* ;

multiplicative = unary ( ( "/" | "*" ) unary )* ;

unary = ( "!" | "-" | "try" ) unary | power ;

power = call ( "^" unary ) ;

call = primary ( "(" arguments? ")" | ( "." | ":" ) IDENTIFIER )* ;

primary = "true" | "false" | "null" | "self"
        | NUMBER | STRING | IDENTIFIER
        | "(" expression ")"
        | "super" ":" IDENTIFIER
        | func_expr;

func_expr = "def" "(" parameters? ")" block ;

arguments = expression ( "," expression )* ;

# ------- #
#  Types  #
# ------- #

atomic_type = identifier ( "::" identifier )* ( "?" )? ;

container_type = atomic_type "[" type ( "," type )* "]" ;

callable_type = atomic_type "(" ( type ( "," type )* )? ")" ;

single_type = atomic_type | container_type | callable_type ;

type = single_type ( "|" single_type )* ;
