import std::json;
import std::url;

pub class Request {
    pub var method: str;
    pub var content_type: str;

    var body: str?;
    var data: map[str, vec[str]];

    def $init() {
        self.method = $env("REQUEST_METHOD");
        self.content_type = $env("CONTENT_TYPE");
        self.data = $map();

        if self.method in $tup("POST", "PUT") {
            if self.content_type == "application/x-www-form-urlencoded" {
                self:unpack_url_encoded_string(self:body());
            } else if self.content_type == "multipart/form-data" {
                # Not implemented.
            }
        }

        var query_string = $env("QUERY_STRING");
        if $is_str(query_string) {
            self:unpack_url_encoded_string(query_string);
        }
    }

    def $str() {
        return $str(self.data);
    }

    pub def body() -> str {
        if $is_str(self.body) {
            return self.body;
        }
        self.body = $stdin():read_string();
        return self.body;
    }

    pub def found(key: str) -> bool {
        return key in self.data;
    }

    pub def value(key: str) -> str|err {
        var values = self.data[key];
        if $is_err(values) {
            return $err();
        }
        return try values:last();
    }

    pub def values(key: str) -> vec[str] {
        return self.data[key] !! [];
    }

    pub def data() -> map[str, vec[str]] {
        return self.data;
    }

    pub def json() -> any {
        return try json::from_json(self:body());
    }

    def unpack_url_encoded_string(input: str) {
        for element in input:split("&") {
            if element:contains("=") {
                var parts = element:split("=");

                var key = url::url_decode(parts[0]);
                if $is_err(key) {
                    continue;
                }

                var value = url::url_decode(parts[1]);
                if $is_err(value) {
                    continue;
                }

                var values = self.data[key];
                if $is_err(values) {
                    self.data[key] = [value];
                } else {
                    values:append(value);
                }
            }
        }
    }
}


pub class Response {
    var headers: vec[str];
    var body: buf;

    def $init() {
        self.headers = $vec();
        self.body = $buf();
    }

    pub def add_header(header: str) -> Response {
        self.headers:append(header);
        return self;
    }

    pub def make_301_redirect(url: str) -> Response {
        self:add_header("Status: 301 Moved Permanently");
        self:add_header("Location: " + url);
        return self;
    }

    pub def make_302_redirect(url: str) -> Response {
        self:add_header("Status: 302 Found");
        self:add_header("Location: " + url);
        return self;
    }

    pub def make_303_redirect(url: str) -> Response {
        self:add_header("Status: 303 See Other");
        self:add_header("Location: " + url);
        return self;
    }

    pub def make_307_redirect(url: str) -> Response {
        self:add_header("Status: 307 Temporary Redirect");
        self:add_header("Location: " + url);
        return self;
    }

    pub def write(*args) -> Response {
        self.body:write(*args);
        return self;
    }

    pub def send() {
        var response = $buf();

        for header in self.headers {
            var line = header:strip():replace("\r", "\\r"):replace("\n", "\\n");
            response:write("{}\r\n", line);
        }

        response:write("\r\n");
        response:write($str(self.body):strip());
        $println(response);
    }
}
