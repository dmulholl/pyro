---
title: Globals
meta_title: Pyro &mdash; Global Functions and Variables
---

Global variables and functions are available in all modules --- you don't need to import anything to use them.
All globals live in the `$pecial` namespace so they won't interfere with your own code.

::: insert toc


### Global Variables


[[ `$args: tup` ]]

    A tuple of strings containing the program's command line arguments.



[[ `$filepath: str` ]]

    A string containing the filepath of the script or module file.



[[ `$roots: vec[str]` ]]

    A vector of strings containing the root directory paths that Pyro checks when attempting to import a module. Directory paths can end with an optional trailing slash. A single dot `.` indicates the current working directory, a single slash `/` indicates the system root directory.



[[ `$stderr: file` ]]

    A `file` object wrapping the standard error stream.



[[ `$stdin: file` ]]

    A `file` object wrapping the standard input stream.



[[ `$stdout: file` ]]

    A `file` object wrapping the standard output stream.



### Global Functions


[[ `$bool(arg: any) -> bool` ]]

    Converts `arg` to a `$bool`.



[[ `$buf() -> buf` ]]

    Creates a new `$buf` object.



[[ `$char(arg: i64) -> char` ]]

    Converts `arg` to a `char`. Panics if the argument is out-of-range.



[[ `$clock() -> f64` ]]

    Returns the number of seconds since the program was launched.
    This function is a wrapper around the C standard library's `clock()` function.



[[ `$debug(arg: any) -> str` ]]

    Returns a string representing `arg` suitable for use in debugging.
    If `arg` has a `:$debug()` method, the output of this method will be returned.
    Otherwise, if `arg` has a `:$str()` method, the output of this method will be returned.
    Otherwise, the default string for `arg` will be returned.



[[ `$eprint(arg: any)` <br> `$eprint(format_string: str, arg1: any, arg2: any, ...)` ]]

    Prints to the error stream.
    Calling this function with a single argument is equivalent to calling `$str()` on that argument first and printing the resulting string.
    Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first and printing the resulting string.

    This function can panic if an error occurs while formatting the output string.



[[ `$eprintln()` <br> `$eprintln(arg: any)` <br> `$eprintln(format_string: str, arg1: any, arg2: any, ...)` ]]

    Like `$eprint()` but adds a terminating newline.



[[ `$err() -> err` <br> `$err(arg1: any, arg2: any, ...) -> err` ]]

    Creates a new `err` object.
    The arguments provide the error's values.



[[ `$exit(code: i64)` ]]

    Instructs the program to exit with the specified exit code.



[[ `$f64(arg: i64|char) -> f64` ]]

    Converts `arg` to a float.



[[ `$file(path: str, mode: str) -> file` ]]

    Creates a new `file` object.
    Opens the underlying file stream using the C function `fopen()`.
    Panics on failure.



[[ `$fmt(format_string: str, arg1: any, arg2: any, ...) -> str` ]]

    Returns the new string created by interpolating the argument values into the format string --- see the [string formatting](@root/features/formatting//) documentation for details.
    This function can panic if an error occurs while formatting the output string.



[[ `$has_field(object: any, field_name: str) -> bool` ]]

    Returns `true` if the object has a field called `field_name`.



[[ `$has_method(object: any, method_name: str) -> bool` ]]

    Returns `true` if the object has a method called `method_name`.



[[ `$hash(arg: any) -> i64` ]]

    Returns the argument's 64-bit hash value.

    (Note that hash values can be negative. Think of the hash as the 64-bit bit-pattern itself. 50% of these patterns will convert to negative signed integers.)



[[ `$i64(arg: f64|char)` ]]

    Converts `arg` to an `i64`.
    Panics if the argument is out-of-range for an `i64`.



[[ `$is_bool(arg: any) -> bool` ]]

    Returns `true` if the argument is a `bool`, otherwise `false`.



[[ `$is_buf(arg: any) -> bool` ]]

    Returns `true` if the argument is a `buf`, otherwise `false`.



[[ `$is_char(arg: any) -> bool` ]]

    Returns `true` if the argument is a `char`, otherwise `false`.



[[ `$is_err(arg: any) -> bool` ]]

    Returns `true` if the argument is an `err`, otherwise `false`.



[[ `$is_f64(arg: any) -> bool` ]]

    Returns `true` if the argument is an `f64`, otherwise `false`.



[[ `$is_file(arg: any) -> bool` ]]

    Returns `true` if the argument is a `file`, otherwise `false`.



[[ `$is_i64(arg: any) -> bool` ]]

    Returns `true` if the argument is an `i64`, otherwise `false`.



[[ `$is_inf(arg: any) -> bool` ]]

    Returns `true` if the argument is floating-point infinity (positive or negative).



[[ `$is_instance(object, class_object) -> bool` ]]

    Returns `true` if `object` is an instance of the specified class or of a subclass of the specified class.



[[ `$is_map(arg: any) -> bool` ]]

    Returns `true` if the argument is a `map`, otherwise `false`.



[[ `$is_mod(arg: any) -> bool` ]]

    Returns `true` if the argument is a module, otherwise `false`.



[[ `$is_nan(arg: any) -> bool` ]]

    Returns `true` if the argument is the floating-point value `NaN`.



[[ `$is_range(arg: any) -> bool` ]]

    Returns `true` if the argument is a `range`, otherwise `false`.



[[ `$is_str(arg: any) -> bool` ]]

    Returns `true` if the argument is a `str`, otherwise `false`.



[[ `$is_tup(arg: any) -> bool` ]]

    Returns `true` if the argument is a `tup`, otherwise `false`.



[[ `$is_vec(arg: any) -> bool` ]]

    Returns `true` if the argument is a `vec`, otherwise `false`.



[[ `$map() -> map` ]]

    Creates a new `$map` object.



[[ `$panic(error_code: i64, error_message: str)` ]]

    Panics with the specified error code and error message.



[[ `$print(arg: any)` <br> `$print(format_string: str, arg1: any, arg2: any, ...)` ]]

    Prints to the output stream.
    Calling this function with a single argument is equivalent to calling `$str()` on that argument first and printing the resulting string.
    Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first and printing the resulting string.

    This function can panic if an error occurs while formatting the output string.



[[ `$println()` <br> `$println(arg: any)` <br> `$println(format_string: str, arg1: any, arg2: any, ...)` ]]

    Like `$print()` but adds a terminating newline.



[[ `$range(stop: i64) -> range` <br> `$range(start: i64, stop: i64) -> range` <br> `$range(start: i64, stop: i64, step: i64) -> range` ]]

    Returns an integer iterator over the half-open interval `[start, stop)`.
    `start` defaults to `0`, `step` defaults to `1` if not specified.



[[ `$read_file(path: str) -> str` ]]

    Reads the content of the file at `path` and returns it as a string.

    Panics if the argument is invalid, if the file cannot be opened, if an I/O read error occurs, or if sufficient memory cannot be allocated for the string.



[[ `$shell(cmd: str) -> tup[i64, str]` ]]

    Runs a shell command and returns a two-item tuple containing its exit code and output.



[[ `$str(arg: any) -> str` ]]

    Stringifies the argument, i.e. returns its default string representation.
    If the argument has a `:$str()` method, the output of this method will be returned.



[[ `$tup() -> tup` <br> `$tup(arg1: any, arg2: any, ...) -> tup` ]]

    Creates a new `tup` object.
    The arguments provide the tuple's values.



[[ `$vec() -> vec` <br> `$vec(arg: iterable) -> vec` <br> `$vec(size: i64, fill_value: any) -> vec` ]]

    Creates a new `vec` object.
    If called with zero arguments, creates an empty vector.
    If called with a single iterable argument, fills the new vector by iterating over the argument.
    If called with two arguments, creates a vector with the specified initial size and fill value.



[[ `$write_file(path: str, content: str|buf) -> i64` ]]

    Writes `content` to a new file, where `content` is a string or a byte buffer.
    Returns the number of bytes written.

    If a file already exists at `path`, that file will be overwritten.

    Panics if the arguments are invalid, if the file cannot be opened for writing, or if an I/O write error occurs.
