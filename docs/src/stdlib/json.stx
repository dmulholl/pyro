---
title: <code>$std::json</code>
meta_title: Pyro Standard Library &mdash; $std::json
---

This module contains utility functions for working with JSON.


### Functions

[[ `format(json: str, indent: i64 = 2) -> str` ]]

    Formats a string of JSON.
    The `indent` argument specifies the number of spaces per level of indentation.


[[ `from_json(arg: str) -> map|vec|str|i64|f64|bool|null` ]]

    Unmarshalls the input JSON string.

    A JSON object is unmarshalled as a `map`, a JSON array is unmarshalled as a `vec`.

    Supports input with trailing commas and comments beginning with `//`.

    Panics if `arg` isn't a valid JSON string.


[[ `to_json(arg: any) -> str` ]]

    Marshalls the Pyro value `arg` to JSON, returning the result as a string.

    The set of valid input values is:

    * `null`
    * `true`
    * `false`
    * `i64`
    * `f64`
    * `str`
    * A `vec` or `tup` containing valid values.
    * A `map` containing string keys and valid values.
    * An object with a `:$json()` method that returns a string containing JSON.
    * Any object whose field values can be marshalled as JSON.

    Note that this function does not check for cycles in the input, e.g. a `vec` that contains itself.
