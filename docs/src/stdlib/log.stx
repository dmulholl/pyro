---
title: <code>std::log</code>
meta_title: Pyro Standard Library &mdash; std::log
---

::: insert toc
::: hr

This library provides basic logging functionality.

Logging levels, in increasing order of severity, are:

* `DEBUG`
* `INFO`
* `WARN`
* `ERROR`
* `FATAL`

The library provides a set of convenience functions for unconditional logging to the standard output stream.
Use a `Logger` instance to customize the logging-level and destination file.



### Constants


[[ `DEBUG: i64` ]]

    Log-level `DEBUG`.

[[ `ERROR: i64` ]]

    Log-level `ERROR`.

[[ `FATAL: i64` ]]

    Log-level `FATAL`.

[[ `INFO: i64` ]]

    Log-level `INFO`.

[[ `WARN: i64` ]]

    Log-level `WARN`.



### Functions


[[ `debug(arg: any)` <br> `debug(format_string: str, *args: any)` ]]

    A convenience function for writing a `DEBUG` log message to the standard output stream.

    * Calling this function with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `error(arg: any)` <br> `error(format_string: str, *args: any)` ]]

    A convenience function for writing an `ERROR` log message to the standard output stream.

    * Calling this function with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `fatal(arg: any)` <br> `fatal(format_string: str, *args: any)` ]]

    A convenience function for writing a `FATAL` log message to the standard output stream.

    This will cause the program to exit with a non-zero status code.

    * Calling this function with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `info(arg: any)` <br> `info(format_string: str, *args: any)` ]]

    A convenience function for writing an `INFO` log message to the standard output stream.

    * Calling this function with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `warn(arg: any)` <br> `warn(format_string: str, *args: any)` ]]

    A convenience function for writing a `WARN` log message to the standard output stream.

    * Calling this function with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.



### Classes

[[ `Logger() -> Logger` ]]

    Initializes a new `Logger` instance.

    * By default, a `Logger` logs to the standard output stream.
    * The default logging level is `INFO`.

`Logger` instances support the following methods:


[[ `:debug(arg: any)` <br> `:debug(format_string: str, *args: any)` ]]

    Writes a `DEBUG` log message to the logger's output file.

    * Calling this method with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this method with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `:error(arg: any)` <br> `:error(format_string: str, *args: any)` ]]

    Writes an `ERROR` log message to the logger's output file.

    * Calling this method with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this method with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `:fatal(arg: any)` <br> `:fatal(format_string: str, *args: any)` ]]

    Writes a `FATAL` log message to the logger's output file.

    This will cause the program to exit with a non-zero status code.

    * Calling this method with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this method with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `:file(output_file: file)` ]]

    Sets the logger's output file.
    The default output file is the standard output stream.


[[ `:info(arg: any)` <br> `:info(format_string: str, *args: any)` ]]

    Writes an `INFO` log message to the logger's output file.

    * Calling this method with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this method with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.


[[ `:level(log_level: i64)` ]]

    Sets the logging level.
    Messages will only be logged if their level is greater than or equal to this logging level.

    The default logging level is `INFO`.


[[ `:warn(arg: any)` <br> `:warn(format_string: str, *args: any)` ]]

    Writes a `WARN` log message to the logger's output file.

    * Calling this method with a single argument is equivalent to calling `$str()` on that argument first and logging the resulting string.

    * Calling this method with more than one argument is equivalent to calling `$fmt()` on those arguments first and logging the resulting string.
