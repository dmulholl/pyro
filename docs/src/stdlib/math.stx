---
title: <code>$std::math</code>
meta_title: Pyro Standard Library &mdash; $std::math
---

This module provides a Pyro interface to the C standard library's mathematical functions.



### Variables


[[ `e` ]]

    Euler's constant as an `$f64`.


[[ `i64_max` ]]

    The maximum allowable value of an `$i64`,
    i.e. `(2^63) - 1`.


[[ `i64_min` ]]

    The minimum allowable value of an `$i64`,
    i.e. `-(2^63)`.


[[ `inf` ]]

    Floating-point positive infinity as an `$f64`.


[[ `nan` ]]

    Floating-point NaN (Not-A-Number) as an `$f64`.


[[ `pi` ]]

    Pi as an `$f64`.



### Functions


[[ `abs(x)` <br> `abs(x, i64_min)` ]]

    Returns the absolute value of `x`, where `x` is an `$i64` or an `$f64`. The output type is the same as the input type.

    Note that the absolute value of the most negative integer is undefined as the result cannot be represented as an `$i64`.
    If you provide a `i64_min` argument, its value will be returned as a fallback in this case.
    Otherwise, the return value will be whatever is returned by the underlying C implementation --- typically a negative value.



[[ `acos(x)` ]]

    Returns the arc cosine of `x` in radians as an `$f64`. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `asin(x)` ]]

    Returns the arc sine of `x` in radians as an `$f64`. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `atan(x)` ]]

    Returns the arc tangent of `x` in radians as an `$f64`. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `atan2(y, x)` ]]

    Returns the arc tangent of `y/x` in radians as an `$f64` using the signs of the arguments to determine the correct quadrant.
    Each argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `cbrt(x)` ]]

    Returns the cubic root of `x` as an `$f64`.
    The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `ceil(x)` ]]

    Returns as an `$f64` the lowest integer value greater than or equal to `x`.
    The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `cos(x)` ]]

    Returns the cosine of `x` as an `$f64`, where `x` is in radians. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `exp(x)` ]]

    Returns `e` to the power of `x` as an `$f64`.
    The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `floor(x)` ]]

    Returns as an `$f64` the highest integer value less than or equal to `x`.
    The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `ln(x)` ]]

    Returns the natural logarithm (i.e. the base-e logarithm) of `x` as an `$f64`.
    The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `log(b, x)` ]]

    Returns the base `b` logarithm of `x` as an `$f64`.
    Each argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `log2(x)` ]]

    Returns the base-2 logarithm of `x` as an `$f64`. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `log10(x)` ]]

    Returns the base-10 logarithm of `x` as an `$f64`. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `sin(x)` ]]

    Returns the sine of `x` as an `$f64`, where `x` is in radians. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `sqrt(x)` ]]

    Returns the square root of `x` as an `$f64`.
    The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.


[[ `tan(x)` ]]

    Returns the tangent of `x` as an `$f64`, where `x` is in radians. The argument can be an `$f64` or an `$i64` which will be automatically converted into an `$f64`.

