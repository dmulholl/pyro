---
title: Building &amp; Installing Pyro
meta_title: Building &amp; Installing Pyro
---

::: insert toc


### Building & Installing

You'll need a C compiler and a POSIX compatible operating system (Mac, Linux, BSD, etc.) to build Pyro from source.

First, download the Pyro repository from Github and `cd` into the `pyro` directory:

::: code
    $ git clone https://github.com/dmulholl/pyro.git
    $ cd pyro

To build the release binary run:

::: code
    $ make release

The release binary will be created in a new `out/release` directory as `out/release/pyro`.

To install the release binary run:

::: code
    $ make install

This copies the `pyro` binary to the `/usr/local/bin/` directory.
(You may need to run `sudo make install` to provide the proper permissions.)

You can now run Pyro like any other installed binary:

::: code
    $ pyro

Running Pyro without a script argument launches the REPL --- an interactive environment where you can try running Pyro commands directly.
Type `exit` or hit `Ctrl-D` to end the REPL session.

To run a Pyro script, supply its filename to the binary:

::: code
    $ pyro path/to/script.pyro



### Test Suite

If you'd like to try hacking on Pyro's source code, you'll want to run the test suite after every change.

To build a new release binary and run the test suite run:

    $ make check-release

To build a new debug binary and run the test suite run:

    $ make check-debug

The debug binary is (much) slower than the release binary. It enables `assert` statements and stresses the garbage collector by running the garbage collection routine before executing each bytecode instruction.

You can also run the test suite using the `test` command directly, e.g.

    $ pyro test tests/*.pyro

You can learn more about the `test` command [here](@root/features/testing//).
