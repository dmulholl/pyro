---
title: Operators
meta_title: Pyro &mdash; Operators
---

::: insert toc


### Operator Precedence

Operator precedence in the table below goes from high at the top to low at the bottom. Operators at the same level have the same precedence.

::: table

    Level            |   Operators                      |   Associativity
    ---------------------------------------------------------------------

    Call             |   `()` `.` `:` `::`              |   Left
    Power            |   `**`                           |   Right
    Unary            |   `!` `-` `~` `try`              |   Right
    Bitwise          |   `&` `\|` `^` `>>` `<<`         |   Left
    Multiplication   |   `*` `/` `//` `%`               |   Left
    Addition         |   `+` `-`                        |   Left
    Comparison       |   `>` `>=` `<` `<=`              |   Left
    Equality         |   `==` `!=`                      |   Left
    Logical          |   `&&` `\|\|` `??` `!!`          |   Left
    Conditional      |   `? :\|`                        |   None
    Assignment       |   `=` `+=` `-=`                  |   Right


Note that conditional expressions using the ternary operator `? :|` can't be nested. (Checkmate, Satan.)



### Mathematical Operators

::: table

    +       | Addition. Returns an integer if both operands are integers or a float if either or both are floats.
    -       | Subtraction (binary) or negation (unary). Subtraction returns an integer if both operands are integers or a float if either or both are floats.
    *       | Multiplication. Returns an integer if both operands are integers or a float if either or both are floats.
    /       | Floating-point division. Both operands will be converted to floats and the result will be a float.
    //      | Truncating division. Returns an integer if both operands are integers or a float if either or both are floats.
    %       | Modulo/remainder operator. Returns an integer if both operands are integers or a float if either or both are floats.
    ^       | Power operator. Both operands are converted to floats and the result is a float.



### Equality & Comparison Operators

The equality (`==`, `!=`) and comparison (`>`, `>=`, `<`, `<=`) operators each take two operands and evaluate to a boolean.

Pyro has a strict concept of equality --- two numbers are equal if and only if they have the same type and the same value.
(This makes checking for equality fast at runtime as Pyro doesn't need to consider all possible conversions.)

Strings are equal if they have the same content;
tuples are equal if they have the same length and their elements are equal;
other objects are equal only if they are the same object.

The comparison operators require that both their operands have the same type. They will panic if this is not case.

Pyro also has a suite of numerical comparison functions which you can use to compare any combination of numerical types:


[[ `$num_compare(a: i64|f64|char, b: i64|f64|char) -> i64` ]]

    Compares the arguments numerically.
    Returns `-1` if `a < b`, `0` if `a == b`, or `1` if `a > b`.

    Will panic if either argument is the `f64` value `NaN`.


[[ `$num_eq(a: i64|f64|char, b: i64|f64|char) -> bool` ]]

    Returns `true` if the arguments are numerically equal.


[[ `$num_ge(a: i64|f64|char, b: i64|f64|char) -> bool` ]]

    Returns `true` if `a` is numerically greater than or equal to `b`.


[[ `$num_gt(a: i64|f64|char, b: i64|f64|char) -> bool` ]]

    Returns `true` if `a` is numerically greater than `b`.


[[ `$num_le(a: i64|f64|char, b: i64|f64|char) -> bool` ]]

    Returns `true` if `a` is numerically less than or equal to `b`.


[[ `$num_lt(a: i64|f64|char, b: i64|f64|char) -> bool` ]]

    Returns `true` if `a` is numerically less than `b`.



### Logical Operators

The logical operators are `||` (OR), `&&` (AND), and `!` (NOT). They evaluate the truthiness of their operands.

The logical operators `||` and `&&` are short-circuiting.

The value of the logical-OR expression `a || b` is the value of the first operand if that operand is truthy, otherwise the value of the second operand.

This means you can use the `||` operator to swap in a default value in place of a falsey expression:

::: code pyro
    var foo = maybe_falsey() || "default";

The value of the logical-AND expresson `a && b` is the value of the first operand if that operand is falsey, otherwise the value of the second operand.

This means you can use the `&&` operator to conditionally chain a sequence of expressions:

::: code pyro
    func1() && func2() && func3();

`func2()` will only be called if `func1()` returns a truthy value; `func3()` will only be called if `func2()` returns a truthy value.



### The Conditional Operator

The conditional or ternary operator takes three operands. It looks like this:

::: code pyro
    var foo = condition ? expr1 :| expr2;

The value of the expression is `expr1` if `condition` evaluates as truthy, otherwise `expr2`.



### The Null-coalescing Operator

The null-coalescing operator `??` lets you swap in a default value in place of a `null`:

::: code pyro
    var foo = maybe_null() ?? "default";

The value of the expression `a ?? b` is the value of the first operand if that operand is not `null`, otherwise the value of the second operand.



### The Error-coalescing Operator

The error-coalescing operator `!!` lets you swap in a default value in place of an error:

::: code pyro
    var foo = maybe_error() !! "default";

The value of the expression `a !! b` is the value of the first operand if that operand is not an `$err`, otherwise the value of the second operand.
