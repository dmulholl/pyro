---
title: Iterators
meta_title: Pyro &mdash; Iterators
---

Pyro's `for` loop uses a simple iterator protocol:

::: code pyro
    for item in [123, 456, 789] {
        echo item;
    }

An object is *iterable* if it has an `:$iter()` method.
This method should return an *iterator* --- an object with a `:$next()` method which returns the next item from the sequence or an `err` if the sequence has been exhausted.



### Example

We can illustrate the iterator protocol by creating a custom `Range` object to iterate over a range of integers:

::: code pyro
    class Range {
        var next = 0;
        var stop;

        def $init(stop) {
            self.stop = stop;
        }

        def $iter() {
            return self;
        }

        def $next() {
            if next < stop {
                next += 1;
                return next - 1;
            }
            return $err();
        }
    }

Note that the `:$iter()` method simply returns `self` --- a `Range` instance is its own iterator.

We can try out our new type like this:

::: code pyro
    for i in Range(5) {
        echo i;
    }

This gives us the following output:

    0
    1
    2
    3
    4

Note that Pyro already has a builtin `$range()` function that returns an iterator over a range of integers.
