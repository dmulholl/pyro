---
title: With Blocks
meta_title: Pyro &mdash; With Blocks
---

::: insert toc
::: hr

You can use a `with` block to ensure that clean-up code gets run, even if the code inside the `with` block panics or returns early.

File objects have builtin support for `with` blocks, e.g.

::: code pyro
    with file = $file("filename.txt") {
        do_stuff();
    }

The file object's `close()` method will be called when the `with` block exits, even if the code inside the `with` block panics or returns early.



### Syntax

`with` blocks have the following syntax:

    with <name> = <expression> {
        ...
    }

Inside the block, `name` is a new local variable.

If the value of `<expression>` has an `$end_with()` method, this method will be called when the `with` block exits, even if the code inside the `with` block panics or returns early.



### Custom Classes

You can add support for `with` blocks to any object by defining an `$end_with()` method, e.g.

::: code pyro
    class File {
        var file;

        def $init(path) {
            self.file = $file(path, "r");
        }

        def $end_with() {
            self.file:close();
        }

        pub def read() {
            return self.file:read_string();
        }
    }

    with file = File("data.txt") {
        echo file:read();
    }

Here the `$end_with()` method ensures that the file will be closed when the `with` block exits, even if the code inside the `with` block panics or returns early.

(In practice, Pyro's `file` type already has builtin support for `with` blocks so this kind of wrapper is unnecessary, but you can implement similar support for your own types.)
