---
title: Errors
meta_title: Pyro &mdash; Errors
---

::: insert toc
::: hr

The error type, `err`, can be returned by functions to indicate failure.

[[ `$err() -> err` <br> `$err(message: any) -> err` <br> `$err(format_string: str, arg1: any, arg2: any, ...) -> err` ]]

    Creates a new `err` object.

    * If called with no arguments, returns an error with an empty message string.

    * If called with a single argument, stringifies that argument and uses the result as the message string.

    * Calling this function with more than one argument is equivalent to calling `$fmt()` on those arguments first.


You can use the `$is_err(arg)` function to check if a value is an `err`.
Alternatively, you can use the error-coalescing operator `!!` to supply a default value for an operation that might return an error:

::: code pyro
    var foo = might_fail() !! "default";



### Error Messages

Stringifying an error returns its message:

::: code pyro
    var err = $err("oh no!");
    assert $str(err) == "oh no!";



### Error Details

Every error object contains a `details` map which you can use to store arbitrary data about the error.
You can index into this `details` map directly on the `err` object itself, e.g.

::: code pyro
    var err = $err("disaster strikes");
    err["code"] = 123;

    var code = err["code"];



### Methods

[[ `:details() -> map` ]]

    Returns the error's `details` map.

[[ `:message() -> str` ]]

    Returns the error's `message` string.
