---
title: Sets
meta_title: Pyro &mdash; Sets
---

::: insert toc
::: hr


A set object, `set`, is an unordered collection of distinct objects.

[[ `$set() -> set` <br> `$set(arg: iterable) -> set` ]]

    Creates a new `set` object.
    If `arg` is iterable, initializes the new set by iterating over its values.

Alternatively, you can create a set by draining an iterator, e.g.

::: code pyro
    var set = "supercalifragilistic":chars():to_set();
    assert set:count() == 12;



### Iterating

Sets are iterable:

::: code pyro
    for char in "supercalifragilistic":chars():to_set() {
        echo char;
    }



### Containment

You can check if a set contains an item using the `in` operator:

::: code pyro
    var set = "supercalifragilistic":chars():to_set();

    if 'x' in set {
        echo "found";
    }



### Set Operators

* The `|` operator returns the union of two sets, e.g. `A | B`.

* The `&` operator returns the intersection of two sets, e.g. `A & B`.

* The `-` operator returns the difference of two sets, e.g. `A - B`.

* The `^` operator returns the symmetric difference of two sets, e.g. `A ^ B`.



### Methods


[[ `:add(item: any)` ]]

    Adds an item to the set.
    This is a null operation if the set already contains a member equal to `item`.

[[ `:contains(item: any) -> bool` ]]

    Returns `true` if the set contains a member equal to `item`, otherwise `false`.

[[ `:count() -> i64` ]]

    Returns the number of items in the set.

[[ `:difference(other: set) -> set` ]]

    Returns a new set containing the difference of the two sets --- i.e. the set of all elements that are in `receiver` but not in `other`.

    Equivalent to `receiver - other`.

[[ `:intersection(other: set) -> set` ]]

    Returns a new set containing the intersection of the two sets --- i.e. the set of all elements that are in both `receiver` and `other`.

    Equivalent to `receiver & other`.

[[ `:is_empty() -> bool` ]]

    Returns `true` if the set is empty.

[[ `:remove(item: any)` ]]

    Removes `item` from the set.
    This is a null operation if the set does not contain a member equal to `item`.

[[ `:symmetric_difference(other: set) -> set` ]]

    Returns a new set containing the symmetric difference of the two sets --- i.e. the set of all elements that are either in `receiver` or in `other` but not both.

    Equivalent to `receiver ^ other`.

[[ `:union(other: set) -> set` ]]

    Returns a new set containing the union of the two sets --- i.e. the set of all elements that are in either `receiver` or `other`.

    Equivalent to `receiver | other`.
