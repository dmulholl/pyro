---
title: Modules
meta_title: Pyro &mdash; Modules
---

A module object, `mod`, is created when you import a Pyro source file using an `import` statement, e.g.

::: code pyro
    import $std::math;
    assert $is_mod(math);

A module object can also be created by executing a string of source code using the `$exec()` function, e.g.

::: code pyro
    var mod = $exec("var foo = 1 + 2;");
    assert $is_mod(mod);
    assert mod::foo == 3;

    assert mod:contains("foo");
    assert mod:get("foo") == 3;

    var globals = mod:globals();
    assert globals["foo"] == 3;



### Methods

[[ `:contains(name: str) -> bool` ]]

    Returns `true` if the module contains a global variable named `name`, otherwise `false`.

    (You can also test for containment using the `in` keyword.)

[[ `:get(name: str) -> any` ]]

    Returns the value of the global variable `name`, or an `err` if `name` is not defined.

[[ `:globals() -> map[str, any]` ]]

    Returns a map containing copies of the module's global variables, indexed by name.
