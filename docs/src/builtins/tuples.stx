---
title: Tuples
meta_title: Pyro &mdash; Tuples
---

::: insert toc
::: hr


A tuple, `tup`, is an immutable array of values.

[[ `$tup() -> tup` <br> `$tup(arg1: any, arg2: any, ...) -> tup` ]]

    Creates a new `tup` object.
    The arguments provide the tuple's values.



### Indexing

You can index into a tuple to get (but not set) entries:

::: code pyro
    var value = tup[index];
    var value = tup:get(index);

Indices are zero-based. Indexing is equivalent to using the `:get()` method as shown.



### Iterating

Tuples are iterable:

::: code pyro
    for item in $tup(123, 456, 789) {
        echo item;
    }



### Methods

[[ `:count() -> i64` ]]

    Returns the number of entries in the tuple.

[[ `:get(index: i64) -> any` ]]

    Returns the value at `index`. Will panic if `index` is out of range or not an integer.

[[ `:slice(start_index: i64) -> vec` <br> `:slice(start_index: i64, length: i64) -> tup` ]]

    Copies a slice of the source tuple and returns it as a new tuple.

    If `start_index` is negative, counts backwards from the end of the tuple --- i.e. a `start_index` of `-1` refers to to the last item in the tuple.

    If `length` is omitted, copies to the end of the source tuple.

    Panics if either argument is out of range.
