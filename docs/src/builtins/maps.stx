---
title: Hash Maps
meta_title: Pyro &mdash; Hash Maps
---

::: insert toc
::: hr


A hash map, `map`, is a collection of key-value pairs.

[[ `$map() -> map` ]]

    Creates a new `map` object.

Pyro's `map` type preserves insertion order so when you iterate over a map you get its entries back in the same order you inserted them.



### Map Literals

You can create a map using literal syntax:

::: code pyro
    var map = {
        "foo" = 123,
        "bar" = 456,
    };



### Indexing

You can index into a map to get or set entries:

::: code pyro
    var value = map[key];
    var value = map:get(key);

    map[key] = value;
    map:set(key, value);

Indexing is equivalent to using the `:get()` and `:set()` methods as shown.

If the map doesn't contain an entry corresponding to `key`, the expression `map[key]` will return an `err`.



### Iterating

You can iterate over a map in three different ways.

1. Iterating over a map directly returns key-value tuples which you can unpack in a for-loop as shown below:

::: code pyro
    for (key, value) in map {
        echo key;
        echo value;
    }

2. The `:keys()` method returns an iterator over the map's keys:

::: code pyro
    for key in map:keys() {
        echo key;
    }

(3) The `:values()` method returns an iterator over the map's values:

::: code pyro
    for value in map:values() {
        echo value;
    }



### Containment

You can check if a map contains a key using the `in` operator:

::: code pyro
    var map = {
        "foo" = 123,
        "bar" = 456,
    };

    if "foo" in map {
        echo "found";
    }

This is equivalent to calling the map's `:contains()` method.



### Key Types

You can use any Pyro value as a key in a `map`.
The only requirement is that key values which compare as equal using the `==` operator should also have the same hash value.
This is true for all builtin types.

Pyro checks for key equality using the `==` operator.
Note that `i64`, `f64`, and `char` values which are numerically equal compare as equal using the `==` operator.
This means that these values work interchangeably as map keys, e.g.

::: code pyro
    var map = {
        65 = "foo",
        66 = "bar",
    };

    assert map['A'] == "foo";
    assert map[66.0] == "bar";



### Methods

[[ `:clear()` ]]

    Removes all entries from the map.

[[ `:contains(key: any) -> bool` ]]

    Returns `true` if the map contains `key`, otherwise `false`.

[[ `:copy() -> map` ]]

    Returns a copy of the map.

[[ `:count() -> i64` ]]

    Returns the number of entries in the map.

[[ `:get(key: any) -> any` ]]

    Returns the value associated with `key` or an `err` if `key` was not found.

[[ `:is_empty() -> bool` ]]

    Returns `true` if the map is empty.

[[ `:iter() -> iter[tup]` ]]

    Returns an iterator over `(key, value)` tuples.

[[ `:keys() -> iter` ]]

    Returns an iterator over the map's keys.

[[ `:remove(key: any)` ]]

    Deletes the entry associated with `key` if it exists.

[[ `:set(key: any, value: any)` ]]

    Adds a new entry to the map or updates an existing entry.

[[ `:values() -> iter` ]]

    Returns an iterator over the map's values.
